<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿灿的大树洞</title>
  <subtitle>物极必反，否极泰来</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-10T07:00:43.249Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Reus</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>拥抱 UIStackView</title>
    <link href="http://yoursite.com/2019/09/01/aboutStackView/"/>
    <id>http://yoursite.com/2019/09/01/aboutStackView/</id>
    <published>2019-09-01T06:31:36.000Z</published>
    <updated>2019-11-10T07:00:43.249Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>　　作为 iOS 开发者，难免会遇到一些 “一个 View 需要基于另一个 View 的消失或出现变更约束”的需求。我之前的做法是选择用 <code>Masnory</code> 将两个约束手动设置成 <code>deactivate</code> 和 <code>activate</code>，在需要的时候变更属性就可以达到。或者使用约束优先级来做，不过约束优先级就不能只依靠 <code>hidden</code> 属性了，需要的可能是 <code>removefromsuperView</code>。</p>
<p>　　苹果在 iOS 9 之后推出了 <code>UIStackView</code>，它可以实现上述需求的自动化处理，让我们的代码更加简洁易读。之前因为开发者们向下兼容版本的原则导致运用的并不太多，但是随着现在 iOS 13 的发布，开发者们也都开始逐步放弃兼容 iOS 8了。这就意味着我们可以随心所欲的在我们的项目中使用 <code>UIStackView</code> 了 。</p>
<a id="more"></a>
<h1 id="关于-UIStackView"><a href="#关于-UIStackView" class="headerlink" title="关于 UIStackView"></a>关于 UIStackView</h1><p>　　<code>UIStackView</code>是<code>UIView</code>的子类，只有它并不能达到呈现视图的效果，我们要做的是把控件放入<code>stackView</code>里，让它来帮助我们管理这些控件的约束。</p>
<p>　　<code>stackView</code>有两种方式可以使用，一就是使用<code>StoryBoard</code>拖入一个<code>stackView</code>，二是使用代码布局加入<code>UIStackView</code>，并<code>addArrangeView</code>控件来达到约束效果。</p>
<p>　　因为平时使用的代码进行布局而非<code>StoryBoard</code>，所以本文会以代码的角度来走进<code>UIStackView</code></p>
<h2 id="UIStackView-的属性"><a href="#UIStackView-的属性" class="headerlink" title="UIStackView 的属性"></a>UIStackView 的属性</h2><ul>
<li>Axis: 将<code>stackView</code>里的子视图设置成垂直布局或水平布局</li>
<li>Alignment: 子视图对齐方式</li>
<li>Distribution: 子视图的分布比例</li>
<li>Spacing: 子视图间距</li>
</ul>
<p><img src="/img/stackView/stackViewAttribute.png" alt="stackView属性"></p>
<h3 id="Axis"><a href="#Axis" class="headerlink" title="Axis"></a>Axis</h3><p>　　<code>Axis</code> 属性从他的名字和他的值<code>vertical</code>和<code>horizontal</code>就可以看出他是决定<code>stackView</code>轴线的属性。</p>
<ul>
<li><p>vertical: 使 <strong>stackView</strong> 里的对象垂直排列</p>
</li>
<li><p>horizontal: 使 <strong>stackView</strong> 里的对象水平排列</p>
</li>
</ul>
<h3 id="Alignment"><a href="#Alignment" class="headerlink" title="Alignment"></a>Alignment</h3><p>　　<code>Alignment</code>属性的值就有些多了，根据设置它的值，来决定子视图的摆放样式。</p>
<p><strong>Fill</strong></p>
<p>　　<code>Fill</code>属性使子视图填满<code>stackView</code>，<code>Vertical</code>模式时则是子视图宽填满，<code>Horizontal</code>模式的时候是子视图高填满。</p>
<p><img src="/img/stackView/Alignment_Fill.png" alt="Fill"></p>
<p><strong>Leading</strong></p>
<p>　　使<code>Vertical</code>模式下的子视图向左对齐，相当于<code>Horizontal</code>模式下的<code>top</code>对齐模式旋转90°。</p>
<p><img src="/img/stackView/Alignment_Leading.png" alt="Leading"></p>
<p><strong>Top</strong></p>
<p>　　使<code>Horizontal</code>模式下的子视图顶部对齐。</p>
<p><img src="/img/stackView/Alignment_Top.png" alt="Top"></p>
<p><strong>FirstBaseline</strong></p>
<p>　　使子视图根据第一个子视图文字的第一行对齐（只在<code>Horizontal</code>模式下生效）</p>
<p><img src="/img/stackView/Alignment_FirstBaseLine.png" alt="FirstBaseline"></p>
<p><strong>LastBaseline</strong></p>
<p>　　使子视图根据首个子视图文字的最后一行对齐（只在<code>Horizontal</code>模式下生效）</p>
<p><img src="/img/stackView/Alignment_LastBaseLine.png" alt="LastBaseLine"></p>
<p><strong>Center</strong></p>
<p>　　使子视图中央对齐</p>
<p><img src="/img/stackView/Alignment_Center.png" alt="Center"></p>
<p><strong>Trailing</strong></p>
<p>　　<code>Vertical</code>模式下的子视图尾部（右侧）对齐</p>
<p><img src="/img/stackView/Alignment_Trailing.png" alt="Trailing"></p>
<p><strong>Bottom</strong></p>
<p>　　<code>Horizontal</code>模式下子视图尾部（下方）对齐</p>
<p><img src="/img/stackView/Alignment_Bottom.png" alt="Alignment_Bottom"></p>
<h3 id="Distribution"><a href="#Distribution" class="headerlink" title="Distribution"></a>Distribution</h3><p>　　属性作用于子视图上，用于子视图的布局</p>
<p><strong>Fill</strong></p>
<p>　　使子视图的宽/高（根据<code>Axis</code>决定）充满<code>stackView</code>，它会优先压缩<code>hugging</code>优先级低的子视图。</p>
<p><img src="/img/stackView/DistributionFill.png" alt="DistributionFill"></p>
<p><strong>FillEqually</strong></p>
<p>　　使子视图的宽/高（根据<code>Axis</code>决定）相等排列，所有子视图都会被拉伸或压缩。</p>
<p><img src="/img/stackView/DistributionFillEqually.png" alt="DistributionFillEqually"></p>
<p><strong>FillPropoetionally</strong></p>
<p>　　根据子视图的比例来拉伸或压缩宽/高。如<code>Horizontal</code>下的三个子视图的宽度比是 1:2:3 ，那根据<code>stackView</code>的大小，子视图会被拉伸或者压缩，但是他们的宽度比始终是 1:2:3</p>
<p><img src="/img/stackView/DistributionFillProportionally.png" alt="DistributionFillProportionally"></p>
<p><strong>EqualSpacing</strong></p>
<p>　　使子视图宽高不变，中间等距排列（自动计算间距使得子控件充满<code>stackView</code>）</p>
<p><img src="/img/stackView/DistributionEqualSpacing.png" alt="DistributionEqualSpacing"></p>
<p><strong>EqualCentring</strong></p>
<p>　　使子视图的中心点之间的距离保持一致，有点类似于<code>EqualSpacing</code></p>
<p><img src="/img/stackView/DistributionEqualCentering.png" alt="DistributionEqualCentering"></p>
<h3 id="Spacing"><a href="#Spacing" class="headerlink" title="Spacing"></a>Spacing</h3><p>　　控制子视图之间的间隔，会优先生效。</p>
<p>　　如在<code>FillEqually</code>情况下，子视图设置了<code>Spacing</code>，则子视图之间会有固定间隔，且子视图的宽/高被压缩。</p>
<h2 id="UIStackView的使用"><a href="#UIStackView的使用" class="headerlink" title="UIStackView的使用"></a>UIStackView的使用</h2><p>　　<code>stackView</code>的使用非常方便，只需要在初始化的时候设置上文的属性，并且将子视图<code>addArrangedSubview</code>进<code>stackView</code>就可以实现布局了。当一个子视图被<code>remove</code>或<code>hidden</code>时，在<code>stackView</code>里的其他子视图就会自动调整。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 示例</span></div><div class="line"><span class="built_in">UIStackView</span> *stackView = [[<span class="built_in">UIStackView</span> alloc] init];</div><div class="line">stackView.alignment = <span class="built_in">UIStackViewAlignmentLeading</span>;</div><div class="line">stackView.axis = <span class="built_in">UILayoutConstraintAxisVertical</span>;</div><div class="line">stackView.spacing = <span class="number">2</span>;</div><div class="line">[stackView addArrangedSubView:View1];</div><div class="line">[stackView addArrangedSubView:View2]; <span class="comment">// View2会显示在View1的下方且间隔为2</span></div></pre></td></tr></table></figure>
<p>　　熟悉了<code>stackView</code>的使用之后，我们会发现我们大多数用<code>stackView</code>都是用于解决等距排列的需求。</p>
<p>　　但我们偶尔还会遇到一些子视图之间间隔不等但还需要自动排列控件的情况，这种需求我们第一选择可能不会使用<code>stackView</code>。</p>
<p>　　事实上，<code>stackView</code>里还有一个<code>setCustomSpacing:afterView:</code>方法，用来设置某个特定 View 以后的间隔，来达到控件不同间隔的效果。但是这个方法只在<code>iOS 11</code>以上的系统才能生效，所以现有情况下，我们可以使用空白的 View 去填充一些空白，来达到子视图之间间隔不相同的效果。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>　　<code>UIStackView</code>是苹果公司很早就退出的一套约束管理控件，但是因为兼容系统版本的问题，我们迟迟没有全面用上。但是现在已经是<code>iOS 13</code>的时代了，我们完全可以张开双手，去拥抱<code>stackView</code>，让我们的代码更加简洁有效。</p>
<p>　　同时希望<code>Swift UI</code>普及的那一天快一点到来。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;　　作为 iOS 开发者，难免会遇到一些 “一个 View 需要基于另一个 View 的消失或出现变更约束”的需求。我之前的做法是选择用 &lt;code&gt;Masnory&lt;/code&gt; 将两个约束手动设置成 &lt;code&gt;deactivate&lt;/code&gt; 和 &lt;code&gt;activate&lt;/code&gt;，在需要的时候变更属性就可以达到。或者使用约束优先级来做，不过约束优先级就不能只依靠 &lt;code&gt;hidden&lt;/code&gt; 属性了，需要的可能是 &lt;code&gt;removefromsuperView&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;　　苹果在 iOS 9 之后推出了 &lt;code&gt;UIStackView&lt;/code&gt;，它可以实现上述需求的自动化处理，让我们的代码更加简洁易读。之前因为开发者们向下兼容版本的原则导致运用的并不太多，但是随着现在 iOS 13 的发布，开发者们也都开始逐步放弃兼容 iOS 8了。这就意味着我们可以随心所欲的在我们的项目中使用 &lt;code&gt;UIStackView&lt;/code&gt; 了 。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>《看不见的脸》</title>
    <link href="http://yoursite.com/2019/03/03/Can-t-see-face/"/>
    <id>http://yoursite.com/2019/03/03/Can-t-see-face/</id>
    <published>2019-03-03T10:26:00.000Z</published>
    <updated>2019-11-10T07:00:43.237Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近被朋友圈的朋友们刷屏了一部日剧</p>
<p>正好剧荒的我就大概查了一下</p>
<p>顿时就，， 惊了</p>
<a id="more"></a>
<p>对它各方的评价都几近完美</p>
<p>豆瓣更是给了 8.5 分</p>
<p><img src="/img/看不见的脸/看不见的脸豆瓣评分.png" alt="img"></p>
<p>没错</p>
<p>这部剧就是《EERIE~看不见的脸》</p>
<p><img src="/img/看不见的脸/封面.jpg" alt="看不见的脸"></p>
<blockquote>
<p>大量剧透注意！！</p>
</blockquote>
<h1 id="剧情"><a href="#剧情" class="headerlink" title="剧情"></a>剧情</h1><p>《看不见的脸》 主要有三条线</p>
<p>一条是社会线</p>
<p>男主与妻子住进休憩小镇</p>
<p>在妻子去世之后</p>
<p>小镇陆续发生奇怪的事件，男主最后与警方合力侦破的故事</p>
<p><img src="/img/看不见的脸/广川.jpg" alt="广川诚司"></p>
<p>一条是学校线</p>
<p>优等生，同时也是邪教受害者的筱田栞</p>
<p>因为可怜帮助被校园暴力的同学</p>
<p>而被其他同学由欢迎变为排挤的故事</p>
<p><img src="/img/看不见的脸/栞结尾.png" alt="栞"></p>
<p>还有一条是煌临会线</p>
<p>用桥本彰武警官的女儿六道菜菜美的视野</p>
<p>揭露煌临会招会员的过程</p>
<p>以及煌临会的各种邪恶行经</p>
<p><img src="/img/看不见的脸/六道菜菜美.jpg" alt="菜菜美"></p>
<h1 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h1><p>黑暗系的日剧总是喜欢建造冲突</p>
<p>这部剧也不例外    </p>
<p>广川诚司是象征人格高尚的老师，却与妻子的妹妹偷情</p>
<p><img src="/img/看不见的脸/第一集开头，惊不惊喜 意不意外？.png" alt="第一集开头，惊不惊喜 意不意外？"></p>
<p>土田律子是象征正义的律师，却是邪教煌临会的小头目</p>
<p><img src="/img/看不见的脸/土田律子.jpg" alt="土田律子"></p>
<p>桥本彰武是象征公平正义的警察，却常参与赛马赌博</p>
<p><img src="/img/看不见的脸/警察角色.png" alt="警官"></p>
<p>呼吁学校应该是学习圣地的佛上健治郞，却是邪教煌临会的幕后黑手</p>
<p><img src="/img/看不见的脸/教育者佛上.png" alt="佛上健治郎"></p>
<p>小姨子水岛丽是受学生欢迎的美女教师</p>
<p>却与男主偷情，还被健治郎强迫做性奴</p>
<p><img src="/img/看不见的脸/水岛丽.png" alt="水岛丽"></p>
<p>正是这种冲突才构建起了整部剧的黑暗属性</p>
<p>你所做的事和你的身份不一定是相符的</p>
<p>整部剧都像在探讨人性</p>
<p>人究竟 DNA 欲望的产物还是有血有肉有感情的灵魂</p>
<h1 id="人性"><a href="#人性" class="headerlink" title="人性"></a>人性</h1><p>整部剧都在强调 “人性” 的 欲望 和 脆弱</p>
<p>男主因为欲望而与小姨子偷情</p>
<p><img src="/img/看不见的脸/广川最后拼.png" alt="广川"></p>
<p>佛上健治郞为了满足强烈欲望而建立煌临会</p>
<p><img src="/img/看不见的脸/欲望拼接.jpeg" alt="佛上"></p>
<p>菜菜美因为无法拒绝他人的请求而被骗</p>
<p>煌临会的人因为病痛导致的脆弱迷信叠手疗法</p>
<p>学校里的同学为了自保而施行校园暴力</p>
<p>正如剧中所说</p>
<p>「”相不相信无所谓，受害的不是自己就行，大家都在拼命的自保“」</p>
<blockquote>
<p><em>“活在幻想里是一个远远较为轻松的选项，唯有这样，才能让一切痛苦有了意义。”    - 尤瓦尔·赫拉利《未来简史》</em></p>
</blockquote>
<h1 id="反抗"><a href="#反抗" class="headerlink" title="反抗"></a>反抗</h1><p>如果仅仅是黑暗面的揭示</p>
<p>我觉得这部剧可能在我心中并不会很优秀</p>
<p>但是在最终话时的反抗，让整部剧有了升华</p>
<p>菜菜美最终因为内心的善良尝试逃出煌临会</p>
<p>水岛丽最后勇敢面对出来指证煌临会</p>
<p>桥本彰武为了女儿开始反抗上级命令</p>
<p>每个人都在尝试说明我们并不是欲望的产物</p>
<p>每个人都在勇敢面对自己的脆弱</p>
<p>正能量来的恰到好处，不会觉得尴尬</p>
<p><img src="/img/看不见的脸/结尾.png" alt="丽"></p>
<p>但是，世界上仍有那么多无助的人</p>
<p>他们的脆弱到底有多容易被利用呢</p>
<p>我想最后菜菜美和栞的经历已经告诉大家了</p>
<p>灭掉一个煌临会，还会有千千万万个煌临会出现</p>
<p>只要脆弱的人需要信仰</p>
<p>只要我们无法面对自己的脆弱</p>
<p>邪恶的东西就永远不会灭亡</p>
<p><img src="/img/看不见的脸/佛上健治郞.jpg" alt="欲望"></p>
<blockquote>
<p><em>“只要能够牢牢抓住一个人内心的弱点，不管是谁，都能建立起自己的王国。”</em></p>
</blockquote>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>最近闲着无聊，开了个公众号写剧评</p>
<p>如果你不幸看到了这篇文章，可以关注关注我的公众号</p>
<blockquote>
<p>灿若星辰</p>
</blockquote>
<p><img src="/img/公众号.png" alt="公众号"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近被朋友圈的朋友们刷屏了一部日剧&lt;/p&gt;
&lt;p&gt;正好剧荒的我就大概查了一下&lt;/p&gt;
&lt;p&gt;顿时就，， 惊了&lt;/p&gt;
    
    </summary>
    
    
      <category term="剧评" scheme="http://yoursite.com/tags/%E5%89%A7%E8%AF%84/"/>
    
  </entry>
  
  <entry>
    <title>protocol &amp; delegate</title>
    <link href="http://yoursite.com/2019/02/24/protocol-delegate/"/>
    <id>http://yoursite.com/2019/02/24/protocol-delegate/</id>
    <published>2019-02-24T07:49:44.000Z</published>
    <updated>2019-11-10T07:00:43.258Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>　　大学四年好快就过去了，毕业之前去公司实习，发现了自己对代理的一些概念还不理解，遂写了这篇文章。</p>
<a id="more"></a>
<h1 id="关于-protocol-amp-delegate"><a href="#关于-protocol-amp-delegate" class="headerlink" title="关于 protocol &amp; delegate"></a>关于 protocol &amp; delegate</h1><p>　　iOS 的 protocol 和 Android 的有一些不一样，因为 iOS 没有多继承，所以很多时候都是用 protocol 来实现。</p>
<p>　　而 delegate 是一种代理的模式，他相当于一个人把一些事情代理给其他人做。比如 A 控制器中有一个值是基于<strong>代理</strong>方法而改变的，当我们从 A 切到 B 控制器时，B 使用了 A 的 <code>delegate</code> 将值进行了更改，那当我们回到 A 时，会发现那个值已经改变。</p>
<h2 id="iOS-中的-protocol"><a href="#iOS-中的-protocol" class="headerlink" title="iOS 中的 protocol"></a>iOS 中的 protocol</h2><p>　　一个 protocol 会定义一套接口，接口有两种：</p>
<ul>
<li>@required: 必须实现的方法</li>
<li>@optional: 可选的实现方法</li>
</ul>
<p>　　我们常常会接触到的 tableViewDataSource 里就有 protocol ，他在里面定义了一些方法让你去实现。</p>
<p><img src="/img/tableViewDataSource.png" alt="DataSource"></p>
<p>我们可以看到我们用 tableView 的时候必须实现的</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//每个 cell 的创建</span></div><div class="line">- (<span class="built_in">UITableViewCell</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath;</div><div class="line"></div><div class="line"><span class="comment">//每个 section 的行数</span></div><div class="line">- (<span class="built_in">NSInteger</span>)tableView:(<span class="built_in">UITableView</span> *)tableView numberOfRowsInSection:(<span class="built_in">NSInteger</span>)section;</div></pre></td></tr></table></figure>
<p>都是在<code>@required</code> 里的，如果我们不实现他，那 tableView 就会空无一值。</p>
<p>而</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// section 个数</span></div><div class="line">- (<span class="built_in">NSInteger</span>)numberOfSectionsInTableView:(<span class="built_in">UITableView</span> *)tableView;   </div><div class="line"></div><div class="line"><span class="comment">//header 名字</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView titleForHeaderInSection:(<span class="built_in">NSInteger</span>)section;  </div><div class="line"></div><div class="line"><span class="comment">//footer 名字</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView titleForFooterInSection:(<span class="built_in">NSInteger</span>)section;</div><div class="line"></div><div class="line">……</div></pre></td></tr></table></figure>
<p>等等是在<code>@optional</code>里的，我们是可以选择不去实现他们的。</p>
<h2 id="delegate"><a href="#delegate" class="headerlink" title="delegate"></a>delegate</h2><p>　　我们继续用<code>tableView</code>举例，我们使用<code>tableView</code>的时候，相当于调用了<code>UITableView</code>这个类，让他来帮助我们生成一个 View。</p>
<p>　　但是这个 tableView 并不知道我们需要多高多宽，什么样子的 View，于是他需要我们进行传值。我们用来把值传给它的类就是一个 delegate 。</p>
<p>　　当然，我们经常用 self 来在本控制器下控制 tableView 。</p>
<p><img src="/img/tableView_nothing.png" width="375" hegiht="650"></p>
<h1 id="自定义-delegate"><a href="#自定义-delegate" class="headerlink" title="自定义 delegate"></a>自定义 delegate</h1><p>　　看过了系统的一些<code>delegate</code>，其实我们也是可以实现代理的，而且使用代理会有许许多多的好处。</p>
<p>　　我们以一个实例来说明，这个例子的逻辑关系基本如下：</p>
<p><img src="/img/delegate_swdt.png" alt="大概思路"></p>
<p>　　现在让我们来实现他吧</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//DelegateController.h</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@class</span> <span class="title">DelegateController</span>;</span></div><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">TestDelegate</span> &lt;<span class="title">NSObject</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">//必须实现</span></div><div class="line"><span class="keyword">@required</span></div><div class="line"></div><div class="line"><span class="comment">//可选</span></div><div class="line"><span class="keyword">@optional</span></div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)DelegateTest:(DelegateController *)vc;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>我们先在<code>.h</code>文件中创造<code>delegate</code>，并声明他的<code>@required</code>和<code>@optional</code>。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//DelegateController.h</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DelegateController</span> : <span class="title">UIViewController</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">id</span>&lt;TestDelegate&gt; delegate;        <span class="comment">/**&lt; delegate  */</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>然后我们再声明一个<code>delegate</code>，之后我们就可以在<code>DelegateController</code>里使用<code>delegate</code>的方法了</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//DelegateController.m</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="comment">// Do any additional setup after loading the view.</span></div><div class="line">    <span class="keyword">self</span>.view.backgroundColor = [<span class="built_in">UIColor</span> blueColor];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//点击改变背景颜色</span></div><div class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event&#123;</div><div class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span>.delegate respondsToSelector:<span class="keyword">@selector</span>(DelegateTest:)]) &#123;</div><div class="line">        [<span class="keyword">self</span>.delegate DelegateTest:<span class="keyword">self</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然，如果我们现在 run 的话，不会有任何的反应，因为<code>delegate</code>里的方法还没有进行实现。</p>
<p>我们还得这样</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//mainController.h</span></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="keyword">self</span>.view.backgroundColor = [<span class="built_in">UIColor</span> whiteColor];</div><div class="line">    [<span class="keyword">self</span> setupDelegateView]; <span class="comment">//delegate</span></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//delegate实现</span></div><div class="line">-(<span class="keyword">void</span>)DelegateTest:(DelegatetestVC *)vc&#123;</div><div class="line">    vc.view.backgroundColor = [<span class="built_in">UIColor</span> orangeColor];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"\n delegate Test Success!"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//切到 DelegateController 页面</span></div><div class="line">-(<span class="keyword">void</span>)setupDelegateView&#123;</div><div class="line">    DelegateController *vc = [[DelegatetestVC alloc]init];</div><div class="line">    <span class="comment">//将 delegate 指定为自己</span></div><div class="line">    vc.delegate = <span class="keyword">self</span>;</div><div class="line">    <span class="comment">//延时一秒切换</span></div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        [<span class="keyword">self</span> presentViewController:vc animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 效果大概就是这样啦</p>
<iframe height="640" width="360" src="/img/delegate_demo.gif">



<h2 id="delegate-的循环引用"><a href="#delegate-的循环引用" class="headerlink" title="delegate 的循环引用"></a>delegate 的循环引用</h2><p>　　细心的朋友应该发现了，我们声明 <code>delegate</code>的时候用的是<code>weak</code>属性</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//weak 属性</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">id</span>&lt;TestDelegate&gt; delegate;</div></pre></td></tr></table></figure>
<p>这是因为我们使用<code>delegate</code>的时候常常会这样</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//将 delegate 指定为自己</span></div><div class="line"><span class="keyword">self</span>.vc.delegate = <span class="keyword">self</span>;</div></pre></td></tr></table></figure>
<p>这就让引用变成了<code>self -&gt;  vc -&gt; self</code> ，所以如果这时候用<code>strong</code>就导致循环引用。</p>
<p>说到循环引用就涉及到 ARC 和内存管理了，可以看我<a href="https://luoyangcan.top/2017/09/13/iOS_ARC/" target="_blank" rel="external">这篇文章</a></p>
<p>当然，我们也可以将代理指定为其他类，那么我们就需要使用<code>strong</code>来修饰<code>delegate</code>了</p>
<h1 id="delegate-的一些应用"><a href="#delegate-的一些应用" class="headerlink" title="delegate 的一些应用"></a>delegate 的一些应用</h1><p>　　当我们需要实现<strong>工厂模式</strong>的时候，我们可以使用<code>delegate</code>，先抽象出一个类声明<code>delegate</code>，再在具体的工厂类中实现他，最后我们调用的时候可以将<code>delegate</code>设置成我们需要的具体工厂，这样就可以实现工厂模式啦。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="developer.apple.com">Apple</a></p>
</iframe>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;　　大学四年好快就过去了，毕业之前去公司实习，发现了自己对代理的一些概念还不理解，遂写了这篇文章。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>关于 IP地址 的那些事</title>
    <link href="http://yoursite.com/2018/11/24/IP-Address/"/>
    <id>http://yoursite.com/2018/11/24/IP-Address/</id>
    <published>2018-11-24T15:29:42.000Z</published>
    <updated>2019-11-10T07:00:43.240Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>　　连接到 Internet 的每个设备至少有一个 IP 地址，但 IP 地址通常被 DNS 挡在我们的视线之外，DNS 让我们习惯使用名称而不是数字地址，有时候我们会自己建立网站（比如这个 blog 的搭建）或者 DNS 莫名失效的时候，我们需要直接处理 IP 地址，那么对于 IP 地址的学习就显得尤为重要了。</p>
<a id="more"></a>
<h1 id="IP-地址"><a href="#IP-地址" class="headerlink" title="IP 地址"></a>IP 地址</h1><h2 id="IPv4-地址"><a href="#IPv4-地址" class="headerlink" title="IPv4 地址"></a>IPv4 地址</h2><p>　　有些 IP 地址是大家比较熟悉的，比如 192.168.0.1 （本地局域网 IP 地址），这个地址的表现就是我们现在最流行的地址类型： IPv4 地址。这些地址通常采用点分四组或点分十进制表示法。每个数字都是一个非负整数，范围是[0，255]</p>
<table>
<thead>
<tr>
<th>点分四组</th>
<th style="text-align:center">二进制</th>
</tr>
</thead>
<tbody>
<tr>
<td>0.0.0.0</td>
<td style="text-align:center">00000000 00000000 00000000 00000000</td>
</tr>
<tr>
<td>1.2.3.4</td>
<td style="text-align:center">00000001 00000010 00000011 00000100</td>
</tr>
<tr>
<td>10.0.0.255</td>
<td style="text-align:center">00001010 00000000 00000000 11111111</td>
</tr>
<tr>
<td>255.255.255.255</td>
<td style="text-align:center">11111111 11111111 11111111 11111111</td>
</tr>
</tbody>
</table>
<p>　　从上表中可以看出 IPv4 的地址长度是 32 位的。</p>
<h2 id="IPv6-地址"><a href="#IPv6-地址" class="headerlink" title="IPv6 地址"></a>IPv6 地址</h2><p>　　IPv6 的地址长度是 128 位的，是 IPv4 的 4 倍。IPv6 地址的传统表示方式称为<strong>块</strong>或<strong>字段</strong>的四个<strong>十六进制</strong>数，这些被数由冒号分隔，比如：<code>5f05:2000:80ad:5800:0058:0800:2023:1d71</code> 。</p>
<p>　　而且还有一些取得共识的 IPv6 地址简化表示法「RFC4291」：</p>
<ul>
<li>一个块中最前面的 0 可以省略</li>
<li>全 0 的块可以省略，用 <code>::</code> 代替。为了避免出现歧义，一个 IPv6 中<code>::</code>只能出现一次。</li>
<li>在 IPv6 中嵌入 IPv4 可使用混合符号，紧接着 IPv4 的地址快的值为<code>ffff</code>，地址的其余部分用<strong>点分四组</strong>格式。比如：<code>::ffff:10.0.0.1</code> 可表示 IPv4 的<code>10.0.0.1</code>，而它被称为 IPv4 映射的 IPv6 地址。</li>
<li>IPv6 地址的低 32 位通常采用<strong>点分四组</strong>格式。所以 <code>::0102:f001</code>相当于<code>::1.2.240.1</code> 它被称为 IPv4 兼容的 IPv6 地址（现在不再需要）</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">十六进制表示</th>
<th style="text-align:center">二进制表示</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">5f05:2000:80ad:5800:0058:0800:2023:1d71</td>
<td style="text-align:center">0101111100000101 0010000000000000<br>1000000010101101 0101100000000000<br>0000000001011000 0000100000000000<br>0010000000100011 0001110101110001</td>
</tr>
<tr>
<td style="text-align:center">::1</td>
<td style="text-align:center">0000000000000000 0000000000000000<br>0000000000000000 0000000000000000<br>0000000000000000 0000000000000000<br>0000000000000000 0000000000000001</td>
</tr>
</tbody>
</table>
<p>　　因为有冒号的存在，有时候我们需要 IP 地址和端口号一起出现的时候，就会有歧义，这个时候，我们用<code>[]</code>隔开，例如：<code>http://[5f05:2000:80ad:5800:0058:0800:2023:1d71]:443/</code>，指的就是 IPv6 主机 5f05:2000:80ad:5800:0058:0800:2023:1d71 中的端口号443 使用 HTTP、TCP 和 IPv6 协议。</p>
<p>　　刚刚提到的「RFC4291」会造成不必要的混淆——能用多种方式表现相同的 IPv6 协议——为了弥补这些情况，「RFC5952」制定了一些规则，以缩小范围：</p>
<ul>
<li>块前面的 0 必须压缩</li>
<li><code>::</code>只能用于最多 0 的情况，并且这不是只针对 16 位的块，如果多个块有等长度的 0 ，顺序靠前的块会被替换成<code>::</code></li>
<li>a 到 f 的十六进制数用小写表示</li>
</ul>
<h1 id="基本的-IP-地址结构"><a href="#基本的-IP-地址结构" class="headerlink" title="基本的 IP 地址结构"></a>基本的 IP 地址结构</h1><p>　　IPv6 和 IPv4 的地址个数是相当多的，它们可以方便的将地址空间分成块。IP 地址可根据类型和大小分组。</p>
<p>　　大多数 IPv4 地址块最终被细分为一个地址，用于识别连接 Internet 或某些专用的内联网的计算机网络接口。这些地址被称为<strong>单播地址</strong>。</p>
<p>　　IPv4 大部分是单播地址，而 IPv6 地址还有大部分没有使用。除了单播地址，还会有<strong>广播</strong>、<strong>组播</strong>和<strong>任播</strong>地址，它们可能涉及多个接口。</p>
<p>　　接下来让我们了解一下 IP 地址的历史演变</p>
<h2 id="分类寻址"><a href="#分类寻址" class="headerlink" title="分类寻址"></a>分类寻址</h2><p>　　暂时搁置</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://book.douban.com/subject/1088054/" target="_blank" rel="external">TCP/IP详解 卷1：协议</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;　　连接到 Internet 的每个设备至少有一个 IP 地址，但 IP 地址通常被 DNS 挡在我们的视线之外，DNS 让我们习惯使用名称而不是数字地址，有时候我们会自己建立网站（比如这个 blog 的搭建）或者 DNS 莫名失效的时候，我们需要直接处理 IP 地址，那么对于 IP 地址的学习就显得尤为重要了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机基础" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>iOS 触摸事件的传递和响应链</title>
    <link href="http://yoursite.com/2018/08/15/ResponseChain/"/>
    <id>http://yoursite.com/2018/08/15/ResponseChain/</id>
    <published>2018-08-15T08:45:17.000Z</published>
    <updated>2019-11-10T07:00:43.244Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>　　事件在我们日常的 iOS 开发中可以说是非常的常见了，我们的 App 与用户进行交互就是靠的这一系列事件传递和响应，MVC 中的 View 层也常通过用户的一些事件来进行响应从而通过 Controller 更新 Modal。</p>
<a id="more"></a>
<h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p>iOS 中的事件可以分为：</p>
<ul>
<li>触摸事件</li>
<li>加速计事件</li>
<li>远程控制事件</li>
</ul>
<p>我们从触摸事件入手，对 iOS 的响应链机制进行一定的认识了解</p>
<h2 id="响应者对象-UIResponder"><a href="#响应者对象-UIResponder" class="headerlink" title="响应者对象 UIResponder"></a>响应者对象 UIResponder</h2><p>　　首先我们要知道，不是每一个对象都可以进行事件的响应和处理的。只有继承了 UIResponder 的对象才能接受并处理事件。</p>
<p>　　我们所熟知的 <code>UIViewController</code>和<code>UIView</code>都是继承自 UIResponder 的。</p>
<p>　　还有一个我们不那么熟悉的<code>UIApplication</code> —— 它是应用程序的象征，是 App 启动后创建的第一个对象 ——也是继承自 UIResponder 的。</p>
<p>UIResponder 里有特殊的方法来处理各个事件：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//触摸事件</span></div><div class="line"><span class="comment">//手指开始触摸 view 时，调用以该方法</span></div><div class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches </div><div class="line">           withEvent:(<span class="built_in">UIEvent</span> *)event;</div><div class="line"><span class="comment">//手指在 view 上移动时，调用该方法</span></div><div class="line">- (<span class="keyword">void</span>)touchesMoved:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches </div><div class="line">           withEvent:(<span class="built_in">UIEvent</span> *)event;</div><div class="line"><span class="comment">//手指离开 view 时，调用方法</span></div><div class="line">- (<span class="keyword">void</span>)touchesEnded:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches </div><div class="line">           withEvent:(<span class="built_in">UIEvent</span> *)event;</div><div class="line"><span class="comment">//离开前，被某个事件打断(如有电话打入)时，调用该方法</span></div><div class="line">- (<span class="keyword">void</span>)touchesCancelled:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches </div><div class="line">               withEvent:(<span class="built_in">UIEvent</span> *)event;</div><div class="line"></div><div class="line"><span class="comment">//加速计事件</span></div><div class="line">- (<span class="keyword">void</span>)motionBegan:(<span class="built_in">UIEventSubtype</span>)motion </div><div class="line">          withEvent:(<span class="built_in">UIEvent</span> *)event;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)motionEnded:(<span class="built_in">UIEventSubtype</span>)motion </div><div class="line">          withEvent:(<span class="built_in">UIEvent</span> *)event;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)motionCancelled:(<span class="built_in">UIEventSubtype</span>)motion </div><div class="line">              withEvent:(<span class="built_in">UIEvent</span> *)event;</div><div class="line"><span class="comment">//远程控制事件</span></div><div class="line">- (<span class="keyword">void</span>)remoteControlReceivedWithEvent:(<span class="built_in">UIEvent</span> *)event;</div></pre></td></tr></table></figure>
<p>从泛型可以看到，<code>touches</code> 里面存的是 UITouch 对象，那这个 UITouch 对象又是什么呢？</p>
<h3 id="UITouch"><a href="#UITouch" class="headerlink" title="UITouch"></a>UITouch</h3><p>UITouch 对象保存着跟手指相关的信息（位置、时间等等），一根手指对应一个 UITouch 对象，手指移动的时会更新此对象，手指离开时，会销毁 UITouch 对象。</p>
<p>UITouch 对象有以下属性和方法：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//有关获取触摸位置</span></div><div class="line"><span class="comment">/** 触摸时的 view 或 window */</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">strong</span>) <span class="built_in">UIView</span> *view;</div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">strong</span>) <span class="built_in">UIWindow</span> *window;</div><div class="line"><span class="comment">/** 确定触摸大小的近似值 */</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">CGFloat</span> majorRadius;</div><div class="line"><span class="comment">/** 确定 majorRadius 的准确性           *</span></div><div class="line"><span class="comment">**  Radius 加上这个值获得最大的触摸半径    *</span></div><div class="line"><span class="comment">**  Radius 减去这个值获得最小的触摸半径    */</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">CGFloat</span> majorRadiusTolerance;</div><div class="line"></div><div class="line"><span class="comment">//相对 view 的坐标位置</span></div><div class="line"><span class="comment">//view 为nil 时，返回相对 UIWindow 的位置</span></div><div class="line">- (<span class="built_in">CGPoint</span>)locationInView:(<span class="built_in">UIView</span> *)view;</div><div class="line"><span class="comment">//前一个 Touch 的位置</span></div><div class="line">- (<span class="built_in">CGPoint</span>)previousLocationInView:(<span class="built_in">UIView</span> *)view;</div><div class="line"></div><div class="line"><span class="comment">//触摸的一些属性</span></div><div class="line"></div><div class="line"><span class="comment">//点按屏幕的次数，判断是单双击或者更多的点击</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSUInteger</span> tapCount;</div><div class="line"><span class="comment">//触摸发生时的时间或最后一次突变的时间</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSTimeInterval</span> timestamp;</div><div class="line"><span class="comment">//触摸的状态</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">UITouchPhase</span> phase;</div><div class="line"><span class="comment">//触摸类型 (支持3D Touch)</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">UITouchType</span> type;</div><div class="line"><span class="comment">//点按力量，1.0 表示平均触摸的力量</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">CGFloat</span> force;</div><div class="line"><span class="comment">//触摸时可能的最大力量</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">CGFloat</span> maximumPossibleForce;</div><div class="line"><span class="comment">//用来支持 Apple Pencil 为 0 时表示笔与表面平行，当笔垂直于表面时，值为 Pi/2</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">CGFloat</span> altitudeAngle;</div><div class="line"></div><div class="line"><span class="comment">//返回方位角</span></div><div class="line"><span class="comment">//以笔尖为原点，在屏幕上做 x/y 轴，笔帽(尾部)指向屏幕正 x 轴时，值为 0</span></div><div class="line"><span class="comment">//围绕笔尖顺时针摆动时，方位角增大</span></div><div class="line">- (<span class="built_in">CGFloat</span>)azimuthAngleInView:(<span class="built_in">UIView</span> *)view;</div><div class="line"><span class="comment">//返回单位矢量</span></div><div class="line">- (<span class="built_in">CGVector</span>)azimuthUnitVectorInView:(<span class="built_in">UIView</span> *)view;</div></pre></td></tr></table></figure>
<h3 id="UIEvent"><a href="#UIEvent" class="headerlink" title="UIEvent"></a>UIEvent</h3><p>UIEvent 记录着时间产生的时刻和类型，一个事件对应一个 UIEvent</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//事件产生时间</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSTimeInterval</span> timestamp;</div><div class="line"><span class="comment">//类型</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">UIEventType</span> type;</div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">UIEventSubtype</span> subtype;</div></pre></td></tr></table></figure>
<p>　　当用两根手指同时触摸一个 view 的时候，那 view 只会调用一次<code>touchesBegan:withEvent:</code>方法，touches 参数中装着两个 UITouch 对象。如果手指一前一后触摸同一个 view，那就会调用两次<code>touchesBegan:withEvent:</code>方法。由此可以看出，根据 UITouch 个数就可以判断是单点还是多点触摸。</p>
<h1 id="事件产生和传递"><a href="#事件产生和传递" class="headerlink" title="事件产生和传递"></a>事件产生和传递</h1><h2 id="事件产生"><a href="#事件产生" class="headerlink" title="事件产生"></a>事件产生</h2><p>　　发生触摸事件之后，该事件会被加入到一个由 UIApplication 管理的事件队列中。</p>
<p>　　UIApplication 会从队列中取出最前面的时间，并分发下去。一般来说它会把事件给keyWindow </p>
<p>　　keyWindow 会找一个最合适的 view 来处理这个事件</p>
<p>　　找到这个 view 之后会调用该 view 的 touches 方法做事件处理。</p>
<h2 id="事件传递"><a href="#事件传递" class="headerlink" title="事件传递"></a>事件传递</h2><p>　　触摸事件的传递是从父控件到子控件的，大概就是 UIApplication -&gt; window -&gt; superview -&gt; view</p>
<p>　　当事件传递找上门的时候，view 会进行如下步骤来配合</p>
<ol>
<li>判断自己是否能接收触摸事件，能的话就继续，不能的话终止</li>
<li>判断触摸点是不是在自己身上，是的话就继续，不是的话终止</li>
<li>从后往前遍历子控件，再重复前两个步骤</li>
<li>如果没有子控件，那就返回自己，自己就是最佳人选！</li>
</ol>
<p>UIView 不接受触摸事件的话一般是一下三种情况</p>
<ul>
<li>userInteractionEnabled = NO</li>
<li>hidden = YES</li>
<li>alpha &lt; 0.01</li>
</ul>
<p>UIView 提供了两个方法来寻找最合适的 view</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 用来寻找最合适的View处理事件，只要一个事件传递给一个控件就会调用控件的hitTest方法，参数point 表示方法调用者坐标系上的点</span></div><div class="line">- (<span class="built_in">UIView</span> *)hitTest:(<span class="built_in">CGPoint</span>)point </div><div class="line">          withEvent:(<span class="built_in">UIEvent</span> *)event;</div><div class="line"></div><div class="line"><span class="comment">// 用来判断当前这个点在不在方法调用者上，点必须在方法调用者的坐标系中，判断才会准确</span></div><div class="line">- (<span class="built_in">BOOL</span>)pointInside:(<span class="built_in">CGPoint</span>)point </div><div class="line">          withEvent:(<span class="built_in">UIEvent</span> *)event;</div></pre></td></tr></table></figure>
<h3 id="hitTest-withEvent"><a href="#hitTest-withEvent" class="headerlink" title="hitTest: withEvent"></a>hitTest: withEvent</h3><p>　　只要事件传给一个控件，这个控件就会调用他的<code>hitTest: withEvent:</code>方法。这个方法通过调用每个 view 的<code>pointInside:withEvent:</code>判断哪个子视图应该接受触摸事件。返回 nil 的时候代表该控件不是最适合的 view，于是系统会去遍历前一个子控件或者直接返回父控件。</p>
<p>　　所以我们可以通过重写<code>hitTest: withEvent:</code>返回指定 view，从而达到拦截事件的效果。</p>
<p>Like This</p>
<p><img src="/img/hitTest.jpg" alt="重写HitTest"></p>
<p>接下来，我们图解一下传递过程</p>
<p><img src="/img/消息传递.png" alt="找到最合适控件"></p>
<p>当我们点击了蓝色的 view</p>
<p>过程会是：UIApplication -&gt; UIWindow -&gt; 白色 view -&gt; 橙色 view -&gt; 红色 view(返回nil) -&gt;蓝色 view</p>
<p>点击黄色 view 的时候</p>
<p>过程会变成：UIApplication -&gt; UIWindow -&gt; 白色 view -&gt; 橙色 view -&gt; 红色 view (返回 nil) -&gt; 蓝色 view -&gt; 黄色 view</p>
<h1 id="事件响应"><a href="#事件响应" class="headerlink" title="事件响应"></a>事件响应</h1><p>　　事件的响应是在事件从 UIApplication 传递到 UIView 之后对事件进行处理的响应。默认的做法就是将事件顺着<strong>响应者链条</strong>往上传（甩）递（锅）。</p>
<h2 id="响应者链条"><a href="#响应者链条" class="headerlink" title="响应者链条"></a>响应者链条</h2><p>　　响应者链条相对于事件传递链的话，可以说是完全相反的，他是由最上面的 View 开始，一直到 UIApplication 的，传递过程中的对象必须是继承自 UIResponder 的响应者对象。</p>
<p>　　响应者链传递过程：</p>
<ol>
<li>如果当前 view 是 ViewController 的 View，那么控制器就是上一个响应者，事件就传递给 ViewController 。如果不是，那么父视图就是上一个响应者，事件传给父视图</li>
<li>最顶层的视图都不能处理，那就扔给 window</li>
<li>如果 window 也不处理，就丢给 UIApplication</li>
<li>UIApplication 也不管的话，就把该事件丢弃。</li>
</ol>
<p>大致关系可以用下图表示：</p>
<p><img src="/img/响应者链条.png" alt="响应者链"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>　　事件处理的流程可以归纳为：</p>
<ol>
<li>触摸屏幕产生时间后，触摸事件会被添加到 UIApplication 的事件队列中</li>
<li>UIApplication 取出最前面的事件，传给 keyWindow</li>
<li>keyWindow 找一个最合适的视图来处理事件</li>
<li>最合适的视图调用 touches 方法处理事件</li>
<li>touches 默认把事件顺着响应者链往上甩锅</li>
<li>如果 UIApplication 都不能处理这个事件，就丢弃。</li>
</ol>
<p>所以我们可以通过重写 touches 方法来达到一个事件让多个对象处理的效果。 </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;　　事件在我们日常的 iOS 开发中可以说是非常的常见了，我们的 App 与用户进行交互就是靠的这一系列事件传递和响应，MVC 中的 View 层也常通过用户的一些事件来进行响应从而通过 Controller 更新 Modal。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>一些想法</title>
    <link href="http://yoursite.com/2018/08/12/internet%20violence/"/>
    <id>http://yoursite.com/2018/08/12/internet violence/</id>
    <published>2018-08-11T18:21:04.000Z</published>
    <updated>2019-11-10T07:00:43.256Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>人们只会看到自己想要看到的</p>
</blockquote>
<p>　　<a id="more"></a></p>

        <div id="aplayer-ZomtzvyK" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-ZomtzvyK"),
            narrow: false,
            autoplay: true,
            showlrc: false,
            music: {
              title: "Something Just Like This",
              author: "The Chainsmokers/Coldplay",
              url: "http://www.ytmp3.cn/down/50463.mp3",
              pic: "http://p1.music.126.net/ggnyubDdMxrhpqYvpZbhEQ==/3302932937412681.jpg",
              lrc: ""
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>
<h1 id="一些想法"><a href="#一些想法" class="headerlink" title="一些想法"></a>一些想法</h1><p>　　很久没写东西了，最近在 QQ空间 看到一条评价国足的说说，还有上万条转发。</p>
<p>​    作为一个职业伪球迷，稍微点进去看了看，图片一个国脚没看到，甚至还看到几张 J 联赛、K 联赛的犯二图。那么问题就来了，为什么会引来那么多“关心国足发展的”网友们的转发呢？</p>
<p>　　在我看来，这是我们对媒体的过度迷信在作怪。</p>
<p>　　在十几年前，或者可以说几年前，人们将媒体视作权威，因为那是少有的获取新鲜资讯的渠道。当时的报纸、收音机、电视台都是引导舆论的存在。</p>
<p>　　但近几年，情况有了一些微妙的变化，越来越多的自媒体涌现，质量却参差不齐。还有一个共同目的——获（活）取（下）流（去）量。（简而言之，因为要恰饭的嘛）于是媒体这个概念逐渐被重新定义。</p>
<p>　　随随便便一篇片面的文章，稍加炒作、转发，在如今爆炸性传播途径下，引起不小的热度。但是这些文字很少有客观的报道，每篇文章几乎都掺杂了一些主观情绪。</p>
<p>​    尤其是心灵鸡汤文，把每个人的“生活”固化，美其名曰“为自己而活”，否定每个人生活的多样性。还有那些大肆宣扬阴谋论的博主，也引得“理智群众”们的疯狂转发欢呼。</p>
<p>　　每个人从小都应该知道世间没有十全十美的人或事，但却总是只喜欢看事情的一面呢？人所看见的，其实只是自己想看见。</p>
<p>　　这些我倒觉得没什么，毕竟从众是一件很平常的事。这个时代信息爆炸，每个人不可能什么都知什么都晓，自媒体应该做的是一种客观的、专业的报道，而不是一种主观意识输出。现在太多的自媒体在不具备专业知识和情报下瞎写了，从”毒疫苗“到”连续快速射电暴是外星人高速飞行的证据“，每一个热度都会引来垃圾媒体的垃圾文章。</p>
<p>　　作为”假疫苗“事件的受害者，看到四处充斥着的”毒疫苗“的新闻，我心里只会有恐惧，一度以为自己可能没了。我这样的20来岁的青年遇上还好，还会去查资料看报道。万一那些受到事件影响的孩子的父母看到这些新闻乱投医，后果不堪设想。但这一切，报道假新闻的自媒体却不用负任何责任。</p>
<p>　　舆论至上的时代，人们开始只看见自己想看的东西，只要符合自己的想法，就盲目跟从节奏，不符合自己的”三观“，就往死里怼，这也导致随随便便一篇文章，在评论区都能看到几句谩骂。这哪里是社交网络啊，完全是释放戾气的地狱。</p>
<p>　　从之前的薛之谦，到现在的吴亦凡，稍微一有节奏，就会有粉丝出来为爱豆洗地，刻意控评，谩骂攻击想法不一的网友。她们一边哭诉自己的爱豆遭受到了前所未有的网络暴力，一边制造着更大的有组织、有针对性的大规模网络暴力。</p>
<p>　　人这种动物，一旦固执起来，谁都纠正不了，偏见和傲慢真的可以毁了一个人。吾日三省吾身不是没有道理的，如果我们不自己思考一些事，那我们永远也不会有更大的进步。</p>
<p>　　为什么我们要强调教育，教育并不是说带给我们什么生活用不到的几何代数，而是给予我们思考的方式，让我们在这浮躁的社会中冷静下来，明辨是非。一味怀着满腔热血，带着戾气敲打着键盘并不能帮助我们成为什么。沉住气，多看书，带着客观冷静的态度看世界，对我们的帮助可能更多。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>　　在北京的最后一个夜晚，突然有感而发，进而胡乱写了一通。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;人们只会看到自己想要看到的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
    
    </summary>
    
    
      <category term="随想" scheme="http://yoursite.com/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>消息转发机制</title>
    <link href="http://yoursite.com/2018/06/07/About_Msg/"/>
    <id>http://yoursite.com/2018/06/07/About_Msg/</id>
    <published>2018-06-07T15:49:55.000Z</published>
    <updated>2019-11-10T07:00:43.236Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>　　消息转发机制是运行时里的一个重要组成部分，它完美的体现了 Objc 动态语言的特性，它可能没有消息发送机制那么有名，但它是我们掌握 Runtime 黑魔法之路上不可或缺的一部分。</p>
<a id="more"></a>
<h1 id="在这之前"><a href="#在这之前" class="headerlink" title="在这之前"></a>在这之前</h1><h2 id="消息发送"><a href="#消息发送" class="headerlink" title="消息发送"></a>消息发送</h2><p>　　我<a href="http://luoyangcan.github.io/2017/09/02/AboutRuntime/" target="_blank" rel="external">之前的关于消息发送的文章</a>里说过，iOS 在对象上调用方法其实是在给某个对象发送一条消息，消息有<code>名称(id)</code>和<code>选择子(selector)</code>。</p>
<p>　　在 objc 中的一个简单的语法，例如</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//main.m</span></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])&#123;</div><div class="line">    <span class="keyword">@autoreleasepool</span>&#123;</div><div class="line">        Person * p = [[Person alloc] init];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在底层都会变成</p>
<p><img src="/img/objc_msgsend.jpg" alt="底层"></p>
<p>　　没错，这个上镜率最高的<code>objc_msgSend()</code>函数就是我们消息发送界的带明星了！它就是我们消息发送机制的核心！</p>
<h2 id="消息传递"><a href="#消息传递" class="headerlink" title="消息传递"></a>消息传递</h2><p>　　<code>objc_msgSend()</code> 会依据接受者（调用方法的对象）的类型和选择子（方法名）来调用适当的方法。</p>
<p>　　接收者会根据 isa 指针找到自己所属的类，然后在所属类的”方法列表“（method list）中从上向下遍历。如果能找到与选择子名称相符的方法， IMP 指针会跳转到方法的实现代码。。</p>
<p>　　如果找不到与选择子名称相符的方法，接收者会根据所属类的 superClass 指针，沿着类的继承体系继续向上查找（向父类查找），如果能找到与名称相符的方法，  IMP 指针就跳转到方法的实现代码，并调用这个方法。</p>
<p>　　如果在继承体系中还是找不到与选择子相符的方法，此时就会执行”消息转发（message forwarding）“操作。</p>
<h1 id="消息转发"><a href="#消息转发" class="headerlink" title="消息转发"></a>消息转发</h1><p>　　我们可以发现，有时候在编译期，向对象或者类对象发送了无法解读的消息，并不会有报错的情况发生，这是因为我们之前也说过， objc是一门动态语言，它可以在类或者元类中添加新的方法，所以编译器在编译期还无法确定是否真的没有这个方法。</p>
<p>　　所以当我们写出了一个无法解读的方法的时候，我们可以在消息转发的过程中挽救一下。</p>
<p>消息转发基本有下面几个流程：</p>
<ul>
<li>动态方法解析：先找接受者属于的类，看能不能动态添加这个方法来处理，如果能，消息转发结束。</li>
<li>重定向：找接受者问问有没有其他对象能处理，如果有，把消息转给那个对象，消息转发结束。</li>
<li>消息签名：找开发者要一个消息签名，如果给nil，消息转发结束。</li>
<li>完整的消息转发：以上流程都不管用的时候，只能把该消息相关的所有细节封装到一个 NSInvocation 对象。再问接受者一次，如果还是不能处理，那消息转发也无能为力了</li>
</ul>
<h2 id="动态方法解析"><a href="#动态方法解析" class="headerlink" title="动态方法解析"></a>动态方法解析</h2><p>对象在收到无法解读的消息后，首先调用其所属类的这个类方法</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)selector</div><div class="line">    <span class="comment">//selector : 消息转发里的未知选择子</span></div><div class="line">    <span class="comment">//返回YES结束消息转发</span></div><div class="line">    <span class="comment">//返回NO找后备接受者</span></div></pre></td></tr></table></figure>
<p>如果未知消息是一个了类方法而非实例方法，则会调用<code>resolveClassMethod</code>方法</p>
<h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p>动态解析失败，则调用这个方法</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">id</span>)forwardingTargetForSelector:(SEL)selector</div><div class="line">    <span class="comment">//返回一个能响应该选择子的 “备胎”对象</span></div></pre></td></tr></table></figure>
<p>在这个方法我们可以实现偷天换日，把这个消息发到其他类去实现。</p>
<h2 id="消息签名"><a href="#消息签名" class="headerlink" title="消息签名"></a>消息签名</h2><p>“备胎”搞不定，这个方法就要被包装成一个<code>NSInvocation</code>对象，在这里要先返回一个消息签名</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSMethodSignature</span> *)methodSignatureForSelector:(SEL)aSelector</div><div class="line">    <span class="comment">//NSMethodSignature : 该sleector对应的方法签名</span></div></pre></td></tr></table></figure>
<h2 id="完整的消息转发"><a href="#完整的消息转发" class="headerlink" title="完整的消息转发"></a>完整的消息转发</h2><p>给最后一次机会处理这个方法，如果不行就没了</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)forwardInvocation:(<span class="built_in">NSInvocation</span> *)invocation</div><div class="line">    <span class="comment">//invocation : 封装了与那条尚未处理消息相关的所有细节对象</span></div></pre></td></tr></table></figure>
<p>这里可以在消息触发前，先改变消息内容，比如追加一个参数或者将一个消息翻译成另一个消息等，<code>forwardInvocation:</code>方法还可以对不同的消息提供同样的响应，这一切都取决于方法的具体实现。</p>
<p>总的来说，消息转发可以简单的用以下的流程图展现：</p>
<p><img src="/img/消息转发.png" alt="消息转发"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>　　当我们掌握了 Runtime 的消息发送和消息转发之后，我们就可以运用黑魔法做很多事情啦！至于黑魔法的实际运用，我可能会在以后的博文中再写。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　消息转发机制是运行时里的一个重要组成部分，它完美的体现了 Objc 动态语言的特性，它可能没有消息发送机制那么有名，但它是我们掌握 Runtime 黑魔法之路上不可或缺的一部分。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>挪威的森林</title>
    <link href="http://yoursite.com/2018/03/21/About%20Love/"/>
    <id>http://yoursite.com/2018/03/21/About Love/</id>
    <published>2018-03-21T12:59:35.000Z</published>
    <updated>2019-11-10T07:00:43.223Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>原来那些大名鼎鼎的情话都不是说给大名鼎鼎的直子小姐的。</p>
</blockquote>
<p>　    <a id="more"></a></p>

        <div id="aplayer-hhlieeLd" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-hhlieeLd"),
            narrow: false,
            autoplay: true,
            showlrc: false,
            music: {
              title: "奇妙能力歌",
              author: "陈粒",
              url: "http://www.ytmp3.cn/down/47208.mp3",
              pic: "http://p1.music.126.net/VuJFMbXzpAProbJPoXLv7g==/7721870161993398.jpg",
              lrc: ""
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>
<p>　　从17岁生日那年同学送的那三本《1Q84》开始接触村上，渐渐被他的文笔吸引，于是买了许许多多他的书。但是却一直没有触及《挪威的森林》，倒也不是因为我不想读，简单来说，以前读书就是为了装逼。入坑之后才明白，文学真是个奇妙的东西。</p>
<p>　　能得到此书完全是一个意外，之前买到的《国境以南，太阳以西》的开头提及此书是 挪威的森林 的续作之类的话，而恰好在学校旁茶馆的书架上，静静躺着一本 挪威的森林 ，闲着无聊的时候读了一小半，在那之后便做了决定买了一本。</p>
<p>　　在21岁这个年纪读到此书，真是一种奇妙的感觉，若我仍在16、7岁血气方刚之时，也只会因为它在同学们口中 小黄书 的口碑而只去关心某些画面吧。</p>
<p>　　我始终认为每个人都应该会在书中找到自己的影子，不管是一心事业，满腹野心的永泽，还是平平淡淡，处理生活琐事的渡边和绿子，从向往忠贞爱情的初美，到最终追随木月的直子，存在于小说里却还是那样真实。村上绘出了几乎所有爱情的形状，苦涩的形状。</p>
<p>　　言归正传</p>
<p>　　在我看来，直子是没有爱过渡边的。她20岁时所做的一切都是在想偿还渡边，她在木月离开后，也想接受渡边的帮助，也想回到现实世界，可以说，渡边和玲子是她活下去的唯一理由。所以在她最后意识到自己与渡边的爱乃至这个世界都格格不入时，毅然决定了追随她的姐姐和木月。</p>
<p>　　而渡边是深深爱着直子的，但如果不是直子20岁的那次答谢，恐怕他并不会意识到这点，他对直子的爱，是纯洁的，不带任何欲望的爱。就像每个青涩的男孩都曾想要守护一个她那样，纯白无瑕。但是绿子的到来，让渡边感受到了，活生生的，鲜活无比的爱情，它并不是像直子那样，想要守护的爱，是相互依靠，真真切切的爱，这可能是每个男孩最终都会想要奔向的爱情。如果说是渡边苦苦支撑着直子，那绿子就是苦苦支撑着渡边的那个人。在没有绿子的那几个月，渡边所感受到的孤独和落寞恰恰体现了这一点。直子与绿子，选谁都是爱情，如果换做自己，白月光与朱砂痣，我们又会选择谁呢。</p>
<p>　　我其实很喜欢书中玲子所说的话：</p>
<blockquote>
<p>就我个人感情而言，绿子倒像是个非常可贵的女孩。你为她倾心这点，从信上看得一清二楚；而你对直子的一片痴情，我也明明白白。这并非什么罪过，只不过是大千世界里司空见惯之事。在风和日丽的天气里荡舟于美丽的湖面，我们既会觉得蓝天迷人，又会深感湖水多娇——二者同一道理。不必那么苦恼。纵令听其自然，世事的长河也还是要流往其应流的方向，而即使再接近人力，该受伤害的人也无由幸免，所谓人生便是如此。</p>
</blockquote>
<p>　　渡边那时同时爱着两个人，想来也是非常纠结的事情，现在看来就是所谓的渣男把。但是其实爱一个人是无私的，当你毫无保留的爱一个人的时候，会像渡边一样处处想着直子，像绿子一样静静等着渡边，像初美那样一直忠于永泽，也许我们现在的人太过于急躁，都不曾去追寻真正的爱情，太快就因为一个小小的错误而否定对方。被营销号和大V们洗脑，被快节奏的生活击溃，整日抱怨找不到真爱。</p>
<p>　　其实选择了一个人，不顾一切珍惜眼前就已经好了，何苦想那么多呢，纵令听其自然罢。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　算是浑浑噩噩的过去了自己的半个大三，以至于寒假无事可做，一个人无聊到思考人生。看着自己慢慢变成了当初不情愿变成的模样，于是在大三下的这个别人喻为最重要的时刻，我开始慢慢恢复读书，不再整日忙碌于准备要来临的面试。(大概已经是佛系青年吧)</p>
<p>　　去年春节的时候，心血来潮，购得了许多书，最后也就读了一两本。重回校园后，深知自己不该再惶惶不可终日。遂重新拿起了这本书。</p>
<p>　　最后想来，还是学生时代青涩的恋爱最过于难忘，毕竟那是不顾一切的爱。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原来那些大名鼎鼎的情话都不是说给大名鼎鼎的直子小姐的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
    
    </summary>
    
    
      <category term="读书" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>探寻 iPhone X 适配</title>
    <link href="http://yoursite.com/2017/11/16/about-iPhoneX/"/>
    <id>http://yoursite.com/2017/11/16/about-iPhoneX/</id>
    <published>2017-11-16T11:08:01.000Z</published>
    <updated>2019-11-10T07:00:43.246Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>iPhone X 出来也有一段时间了，苹果官方和各位大神也对于 iPhone X 的刘海打理给出了很多方法。</p>
<p>我因个人项目在 iPhone X 的环境下运行时界面千奇百怪 (估计是代码能力太菜 - -)</p>
<p>所以也打算蹭一波热度，把自己对于 iPhone X 适配的一点小小的经历分享出来</p>
<p>​    <a id="more"></a></p>
<h1 id="关于iPhone-X"><a href="#关于iPhone-X" class="headerlink" title="关于iPhone X"></a>关于iPhone X</h1><h2 id="一个有刘海的屏幕"><a href="#一个有刘海的屏幕" class="headerlink" title="一个有刘海的屏幕"></a>一个有刘海的屏幕</h2><p>iPhone X 的机型的屏幕尺寸达到了 5.8英寸，而机子的宽度和 iPhone 8 一致，在垂直方向上却多出了 145pt，这意味着可以显示的界面又一次变“长”了。</p>
<p>值得注意的是 iPhone X 的顶部是有圆角和刘海的，所以我们在设计页面的时候还需要避免内容被顶部的圆角还有刘海挡住。</p>
<p><img src="/img/圆角遮挡.png" alt="CGRect(0,0,200,200)"></p>
<h2 id="全新的界面理念"><a href="#全新的界面理念" class="headerlink" title="全新的界面理念"></a>全新的界面理念</h2><h3 id="Status-Bar"><a href="#Status-Bar" class="headerlink" title="Status Bar"></a>Status Bar</h3><p>iPhone X 的 Status Bar 高度比之前的 20pt 高了 22pt。也就是说现在的高度为 44pt。(还好我没把之前的项目写死在 20pt，不然估计现在心态崩了)</p>
<h3 id="屏幕底部"><a href="#屏幕底部" class="headerlink" title="屏幕底部"></a>屏幕底部</h3><p>自从 iPhone X 没有了 Home 键，苹果在底部划了一个 34pt 高的区域( Home Indicator )来预留给底部手势操作</p>
<p>如果我们的底部是 TabBar，那 Home Indicator 会延展你的 barTintColor，如果没有的话就会显示为透明的。</p>
<h3 id="SafeArea"><a href="#SafeArea" class="headerlink" title="SafeArea"></a>SafeArea</h3><p>iOS 11 废弃了 iOS 7 之后出现的 topLayoutGuide/bottomLayoutGuide，而用 SafeLayoutGuide 取而代之。</p>
<p>我们的 UI 都应该在 SafeArea 之内，以便不被各种 bar(NavigationBar、ToolBar、Tabbar、StatusBar)遮挡</p>
<p><img src="/img/SafeArea.png" alt="SafeArea"></p>
<p>若我们使用 AutoLayout，并开启了 safeAreaLayoutGuide，布局会自动加上 safeLayoutGuide，也就是自动将我们的布局限制在 SafeArea 之中。当然，我们也可以使用 self.additionalSafeAreaInsets 来增加 Guide 的区域。</p>
<p>在我们用 Masonry 进行布局时，亦需要进行适配，我们可以把</p>
<p><code>make.bottom.equalTo(self.view.mas_bottom;)</code></p>
<p>和</p>
<p><code>make.top.equalTo(self.view.mas_top);</code></p>
<p>改为</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (@available (iOS <span class="number">11.0</span>, *))&#123;</div><div class="line">  make.bottom.equalTo(<span class="keyword">self</span>.view.mas_safeAreaLayoutGuideBottom);</div><div class="line">  make.bottom.equalTo(<span class="keyword">self</span>.view.mas_safeAreaLayoutGuideTop);</div><div class="line">&#125;<span class="keyword">else</span> &#123;</div><div class="line">  make.bottom.equalTo(<span class="keyword">self</span>.view.mas_bottom);</div><div class="line">  make.bottom.equalTo(<span class="keyword">self</span>.view.mas_top);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>图片的 Aspect Ratio 的表现也不同了</p>
<p>因为刘海两侧的区域都能响应手势，所以最好不要和自己界面的手势发生冲突。</p>
<p>如果我们使用 Images.xcassets 文件夹下的 LaunchImage 作为启动图，就必须单独制作一张 1125px × 2436px (375pt × 812pt @3x) 图片，不然沿用 iPhone 7 启动图尺寸会出现上下有黑色区域的情况。</p>
<p>如果我们以一个界面启动，那我们也需要重新做一张图来避免图片因为屏幕大小改变而拉伸过度。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://tech.meituan.com/iPhoneX%E5%88%98%E6%B5%B7%E6%89%93%E7%90%86%E6%8C%87%E5%8C%97.html" target="_blank" rel="external">美团点评技术团队 - iPhone X 刘海打理指北</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;iPhone X 出来也有一段时间了，苹果官方和各位大神也对于 iPhone X 的刘海打理给出了很多方法。&lt;/p&gt;
&lt;p&gt;我因个人项目在 iPhone X 的环境下运行时界面千奇百怪 (估计是代码能力太菜 - -)&lt;/p&gt;
&lt;p&gt;所以也打算蹭一波热度，把自己对于 iPhone X 适配的一点小小的经历分享出来&lt;/p&gt;
&lt;p&gt;​
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="iPhoneX" scheme="http://yoursite.com/tags/iPhoneX/"/>
    
  </entry>
  
  <entry>
    <title>关于 @property</title>
    <link href="http://yoursite.com/2017/10/18/about-property/"/>
    <id>http://yoursite.com/2017/10/18/about-property/</id>
    <published>2017-10-18T13:59:48.000Z</published>
    <updated>2019-11-10T07:00:43.248Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>不论是初入iOS开发还是已经是老江湖的开发者，想必<code>@property</code> 已经成为了我们最熟悉的一个语法。</p>
<p>“属性” (property) 作为 Objc 的一项特性，主要作用就在于封装对象中的数据。Objc 对象通常会把所需要的数据保存为各种实例变量。</p>
<p>实例变量一般通过”存取方法” (access method) 访问。</p>
<p>获取方法 (getter) 用于读取变量值</p>
<p>设置方法 (setter) 用于写入变量值</p>
<p>在正规的 Objc 编码风格中，存取方法有这严格的命名规范。</p>
<p>正是因为这样的命名规范，所以 Objc 这门语言才能根据名称自动创建出存取方法。</p>
<p>​    <a id="more"></a></p>
<h1 id="关于-property"><a href="#关于-property" class="headerlink" title="关于@property"></a>关于@property</h1><hr>
<p>想必大家应该都知道或者了解，<code>@property</code>语句相当于系统自动为我们生成了<code>getter</code>和<code>setter</code>方法。</p>
<p>想必大家还应该知道，我们常常在调用实例变量的时候，会出现一个前面带<strong>下划线</strong>的变量，这个变量我们也从未去特意声明过。辣么这个“下划线变量”到底是哪里来的？</p>
<p>没错，就是棒棒的<code>@property</code>带来的。</p>
<p>所以我们可以说<code>@property = ivar(实例变量) + getter + setter</code>。</p>
<p>比如下面这个经典的例子</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> : <span class="title">NSObject</span></span></div><div class="line"><span class="keyword">@property</span> <span class="built_in">NSString</span> *firstName;</div><div class="line"><span class="keyword">@property</span> <span class="built_in">NSString</span> *lastName;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>上面的写法等价于：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> : <span class="title">NSObject</span></span></div><div class="line">- (<span class="built_in">NSString</span> *)firstName;</div><div class="line">- (<span class="keyword">void</span>)setFirstName:(<span class="built_in">NSString</span> *)firstName;</div><div class="line">- (<span class="built_in">NSString</span> *)lastName;</div><div class="line">- (<span class="keyword">void</span>)setLastName:(<span class="built_in">NSString</span> *)lastName;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h2 id="property属性关键字"><a href="#property属性关键字" class="headerlink" title="@property属性关键字"></a>@property属性关键字</h2><p>属性可拥有的特质分为四类：</p>
<ul>
<li><p>原子性 —— <code>nonatomic</code></p>
<p>在默认情况下，由编译器合成的方法会通过锁定机制确保原子性(atomicity)。如果属性具备<code>nonatomic</code>特质，则不使用自旋锁。请注意，尽管没有名为”atomic”的特质(如果某属性不是<code>nonatomic</code>，那他就是原子的<code>atomic</code>)。</p>
</li>
</ul>
<ul>
<li><p>读写权限 ——<code>readwrite(读写)</code>、<code>readonly(只读)</code></p>
</li>
<li><p>内存管理 ——<code>assign</code>、<code>strong</code>、<code>weak</code>、<code>unsafe_unretained</code>、<code>copy</code></p>
</li>
<li><p>方法名 ——<code>getter = &lt;name&gt;</code>、<code>setter = &lt;name&gt;</code> </p>
<p><code>getter = &lt;name&gt;</code>的样式：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">getter</span> = isOn) <span class="built_in">BOOL</span> on;</div></pre></td></tr></table></figure>
<p><code>setter = &lt;name&gt;</code>一般用在特殊环境下，比如：</p>
<p>在数据反序列化、转模型的过程中，服务器返回的字段以<code>init</code>开头，所以你需要定义一个<code>init</code>开头的属性，但默认生成的<code>getter</code>和<code>setter</code>方法也会以<code>init</code>开头。但是编译器会把<code>init</code>开头的方法当成初始化方法，而初始化方法只能返回self，所以编译器会报错。</p>
<p>这时候我们就要用到<code>setter = &lt;name&gt;</code>来防止编译器报错</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">getter</span>=p_initBy, <span class="keyword">setter</span>=setP_initBy:)<span class="built_in">NSString</span> *initBy;</div><div class="line"></div><div class="line"><span class="comment">//对关键字特殊说明</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">readwrite</span>, <span class="keyword">copy</span>, <span class="keyword">null_resettable</span>) <span class="built_in">NSString</span> *initBy;</div><div class="line">- (<span class="built_in">NSString</span> *)initBy __attribute__((objc_method_family(none)));</div></pre></td></tr></table></figure>
</li>
<li><p>不常用的<code>nonnull</code>、<code>null_resettable</code>、<code>nullable</code></p>
</li>
</ul>
<h2 id="ivar"><a href="#ivar" class="headerlink" title="ivar"></a>ivar</h2><p>说到 ivar，就要涉及到内存管理的知识了</p>
<p>还是那个例子</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> : <span class="title">NSObject</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSString</span> *_firstName;</div><div class="line">  	<span class="built_in">NSInteger</span> _age;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line">  </div><div class="line">  </div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">AClass</span></span></div><div class="line">- (<span class="keyword">instancetype</span>)init&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init])&#123;</div><div class="line">        _age = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>这个 Person 类被编译之后变成一个描述 (arm64)，Person 占用24个字节，前8个字节是 isa 指针，中间八个字节是 NSString 指针，后八个字节是 NSInteger 的值</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">| isa | <span class="built_in">NSString</span> * _firstName | <span class="built_in">NSInteger</span> _age |</div></pre></td></tr></table></figure>
<p>调用<code>[[Person alloc]init]</code>的时候，会分配出24个字节的内存出来：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">| <span class="number">0</span> | <span class="number">0</span> | <span class="number">0</span> |</div></pre></td></tr></table></figure>
<p>然后往前8个字节放isa地址</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//alloc完成后</span></div><div class="line">| isa | <span class="number">0</span> | <span class="number">0</span> |</div></pre></td></tr></table></figure>
<p>然后调用alloc出来的 init 方法，把 _age 的值赋为1，因为 _firstName 没有初始化，所以还是0。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//init之后</span></div><div class="line">| isa | <span class="number">0</span> | <span class="number">1</span> |</div></pre></td></tr></table></figure>
<p><code>isa</code>指向了这个类的元类，也就是 meta，meta 里存储了父类/ ivar 结构/方法等内容，关于这个，在<a href="http://luoyangcan.top/2017/09/13/iOS%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-ARC/" target="_blank" rel="external">另一篇文章中</a>可以看到。</p>
<h2 id="getter与setter"><a href="#getter与setter" class="headerlink" title="getter与setter"></a>getter与setter</h2><p>前言说了</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Objc对象通常会把所需要的数据保存为各种实例变量。</div><div class="line"></div><div class="line">实例变量一般通过<span class="string">"存取方法"</span><span class="comment">(access method)</span>访问。</div><div class="line"></div><div class="line">获取方法<span class="comment">(getter)</span>用于读取变量值</div><div class="line"></div><div class="line">设置方法<span class="comment">(setter)</span>用于写入变量值</div></pre></td></tr></table></figure>
<p>这个观念，几乎都深深的刻在所有程序猿的脑海中。</p>
<p>所以 iOS 开发者在使用<code>@property</code>带来的便利的同时，不能忘记这个重要的想法。</p>
<p>我们所用到的<code>person.firstName = @&quot;Reus&quot;</code>其实是一个语法糖，等同于<code>[person setFirstName:@&quot;Reus&quot;]</code>。</p>
<p>在过去我们需要声明对应的实例变量<code>@synthesize person = _person</code>。</p>
<p>现在，一句<code>@property</code>已经可以做到以上所有的步骤了，并且善用<code>@property</code>对于内存管理来说，也是一件好事。</p>
<h1 id="property-的那些事"><a href="#property-的那些事" class="headerlink" title="property 的那些事"></a>property 的那些事</h1><p>property 在 runtime 中是<code>objc_property_t</code>，定义如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_property *objc_property_t;</div></pre></td></tr></table></figure>
<p>而<code>objc_property</code>是一个结构体，包含了<code>name</code>和<code>attributes</code>。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> property_t &#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *attributes;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>attributes 本质是<code>objc_property_attribute_t</code>，定义了 property 的一些属性。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;</div><div class="line"> 	<span class="keyword">const</span> <span class="keyword">char</span> *value;</div><div class="line">&#125; objc_property_attribute_t;</div></pre></td></tr></table></figure>
<p>attributes 的具体内容大概包括<code>类型</code>，<code>原子性</code>，<code>内存语义</code>，<code>对应的实例变量</code>。</p>
<p>我们定义一个string的 property <code>@property (nonatomic, copy) NSString *string;</code>，通过<code>property_getAttributes(property)</code>获取到attributes并打印，结果为<code>T@&quot;NSString&quot;,C,N,V_string</code></p>
<p>T 代表类型，C 代表 Copy，N 代表 nonatomic，V 代表实例变量。</p>
<h1 id="自动合成"><a href="#自动合成" class="headerlink" title="自动合成"></a>自动合成</h1><p>完成属性定义后，编译器会自动编写访问这些属性所需的方法，此过程叫“自动合成” (autosynthesis)。这个过程是在编译的时候由编译器执行。除了生成 getter、setter 之外，编译器还要向类中添加适当类型的实例变量，并且在属性名前面加下划线，以此作为实例变量的名字。</p>
<p>可通过<code>@synthesize</code>语法来指定实例变量的名字。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span></span></div><div class="line"><span class="keyword">@synthesize</span> firstName = _myFirstName;</div><div class="line"><span class="keyword">@synthesize</span> lastName = _myLastName;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p><a href="http://weibo.com/luohanchenyilong/" target="_blank" rel="external">微博@iOS程序犭袁</a>曾反编译过相关代码，他大致生成了五个东西</p>
<ul>
<li><code>OBJC_IVAR_$类名$属性名称</code>：该属性的“偏移量”(offset)，这个偏移量是“硬编码”  (hardcode)，表示该变量距离存放对象的内存区域的起始地址有多远。</li>
<li>setter 与 getter 方法对应的实现函数</li>
<li><code>ivar_list</code>：成员变量列表</li>
<li><code>method_list</code>：方法列表</li>
<li><code>prop_list</code>：属性列表</li>
</ul>
<p>我们每次增加一个属性，系统都会在<code>ivar_list</code>中添加一个成员变量的描述，在<code>method_list</code>中增加 setter 与 getter 方法的描述，在<code>prop_list</code>中增加一个属性的描述，再计算偏移量，给出 setter 与 getter 方法对应的实现。在 setter 方法中从偏移量位置开始赋值，在 getter 方法中从偏移量开始取值，为了读取正确的字节数，系统偏移量的指针类型进行了强转。</p>
<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>一般情况下，我们应该多用 @property，因为它可以进行某种程度的自动内存管理。但是我们在用 @property 这样方便的语法时，也千万不能忘记他的本质，这样才更有利于我们对于开发的理解。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://segmentfault.com/q/1010000000185056" target="_blank" rel="external">segmentfault</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;不论是初入iOS开发还是已经是老江湖的开发者，想必&lt;code&gt;@property&lt;/code&gt; 已经成为了我们最熟悉的一个语法。&lt;/p&gt;
&lt;p&gt;“属性” (property) 作为 Objc 的一项特性，主要作用就在于封装对象中的数据。Objc 对象通常会把所需要的数据保存为各种实例变量。&lt;/p&gt;
&lt;p&gt;实例变量一般通过”存取方法” (access method) 访问。&lt;/p&gt;
&lt;p&gt;获取方法 (getter) 用于读取变量值&lt;/p&gt;
&lt;p&gt;设置方法 (setter) 用于写入变量值&lt;/p&gt;
&lt;p&gt;在正规的 Objc 编码风格中，存取方法有这严格的命名规范。&lt;/p&gt;
&lt;p&gt;正是因为这样的命名规范，所以 Objc 这门语言才能根据名称自动创建出存取方法。&lt;/p&gt;
&lt;p&gt;​
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>PY语言基础</title>
    <link href="http://yoursite.com/2017/09/24/About%20Python/"/>
    <id>http://yoursite.com/2017/09/24/About Python/</id>
    <published>2017-09-24T15:04:40.000Z</published>
    <updated>2019-11-10T07:00:43.225Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr>
<p>因为最近没事干想学下爬虫玩一下，顺便因为自己是信息安全专业，学一下py应该还蛮有趣的。</p>
<p>​    <a id="more"></a></p>
<p>安装Python这些就不扯了</p>
<p>直接进入基础吧</p>
<h1 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h1><hr>
<p>其实Python的数据类型和其他语言的差不多，大致也是以下几种</p>
<h2 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h2><p>Python可处理任意大小的整数。</p>
<p>由于计算机使用二进制，所以有时候用十六进制表示整数比较方便。</p>
<p>十六进制用<code>0x</code>前缀和0~9,a~f表示。例如<code>0xff00</code></p>
<h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h2><p>浮点数就是小数。</p>
<p>之所以叫他浮点数，是因为用科学计数法表示时，一个浮点数的小数点位置是可变的。就像<code>1.23x10^9</code>和<code>12.3x10^8</code>完全相等。</p>
<p>对于很大的数或很小的浮点数，就必须用科学计数法表示</p>
<p>在Python中文名用e替代10。也就是说<code>1.23x10^9</code>等价于<code>1.23e9</code></p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串是以单引号<code>‘</code>和双引号<code>&quot;</code>括起来的任意文本</p>
<p>单引号双引号都可以用，只要不混用。</p>
<p>如果<code>&#39;</code>本来就是一个字符，那可以用<code>&quot;&quot;</code>括起来。</p>
<p>如果字符串内又有<code>&quot;</code>又有<code>&#39;</code>的话。</p>
<p>熟悉的转义字符就出现了，还是老样子，还是用<code>\</code>标识</p>
<p>Python的字符串是以Unicode编码的，所以Python的字符串支持多种语言</p>
<p>Python的字符串类型是<code>str</code>，在内存中用Unicode表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把<code>str</code>转化为<code>bytes</code></p>
<p>Python对<code>bytes</code>类型的数据用带<code>b</code>前缀的单引号或双引号表示：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">x = <span class="string">b'ABC'</span></div></pre></td></tr></table></figure>
<p>要注意区分<code>ABC</code>和<code>b&#39;ABC&#39;</code>。后者虽然内容和前者一样，但是<code>bytes</code>的每个字符只占用一个字节。</p>
<p>以Unicode表示的<code>str</code>都可以通过<code>encjode()</code>方法编码为制定的<code>bytes</code>。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'ABC'</span>.encode(<span class="string">'ascii'</span>)</div><div class="line"><span class="string">b'ABC'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'中文'</span>.encode(<span class="string">'utf-8'</span>)</div><div class="line"><span class="string">b'\xe4\xb8\xad\xe6\x96\x87'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'中文'</span>.encode(<span class="string">'ascii'</span>)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File<span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">UnicodeEncodeError:<span class="string">'ascii'</span> codec can<span class="string">'t encode characters in position 0-1:ordinal not in range(128)</span></div></pre></td></tr></table></figure>
<p>纯英文的<code>str</code>可以用<code>ASCII</code>编码为<code>bytes</code>，内容是一样的。含有中文的<code>str</code>可以用<code>UTF-8</code>编码为<code>bytes</code>。含有中文的<code>str</code>无法用<code>ASCII</code>编码，因为中文编码超过了<code>ASCII</code>编码的范围，会报错。</p>
<p>反过来我们如果要从网络上读取字节流，就要把<code>bytes</code>变为<code>str</code>，需要用到<code>decode()</code>方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'ABC'</span>.decode(<span class="string">'ascii'</span>)</div><div class="line"><span class="string">'ABC'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'\xe4\xb8\xad\xe6\x97\x87'</span>.decode(<span class="string">'utf-8'</span>)</div><div class="line"><span class="string">'中文'</span></div></pre></td></tr></table></figure>
<p>要计算长度，可以用<code>len()</code>函数</p>
<p>由于Python源代码也是一个问本文件，所以当你的源代码包含中文的时候，为了避免乱码，应当自始至终用UTF-8编码，当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们常在开头上写：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div></pre></td></tr></table></figure>
<p>第一行是为了告诉Linux/OS X系统，这是一个Python可执行程序</p>
<p>第二行是为了告诉Python解释器，按照UTF-8编码读取源代码。</p>
<p>我们经常会输出类似<code>亲爱的xx您好！…</code>这种字符串。xx的内容是需要变化的</p>
<p>在Python中 ，这样的方式是用<code>%</code>实现</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hello, %s'</span> % <span class="string">'world'</span></div><div class="line"><span class="string">'Hello, world'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Dear %s , you have $%d'</span> % (<span class="string">'Rues'</span>,<span class="number">7</span>)</div><div class="line"><span class="string">'Dear Reus , you have $7'</span></div></pre></td></tr></table></figure>
<p>和许多语言一样，Python也有很多占位符</p>
<table>
<thead>
<tr>
<th>占位符</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>%d</td>
<td>整数</td>
</tr>
<tr>
<td>%f</td>
<td>浮点数</td>
</tr>
<tr>
<td>%s</td>
<td>字符串</td>
</tr>
<tr>
<td>%x</td>
<td>十六进制整数</td>
</tr>
</tbody>
</table>
<p>格式化整数和浮点数还可以指定是否补0和整数与小数的位数。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%2d-%02d'</span> % (<span class="number">3</span>,<span class="number">1</span>)</div><div class="line"><span class="string">'3-01'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%.2f'</span> % <span class="number">3.1415926</span></div><div class="line"><span class="string">'3.14'</span></div></pre></td></tr></table></figure>
<p>如果你不确定要用什么，那就用<code>%s</code>，就好比Objective-C中的<code>%@</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Age: %s. Gender: %s'</span> % (<span class="number">25</span>,<span class="keyword">True</span>)</div><div class="line"><span class="string">'Age: 25. Gender: True'</span></div></pre></td></tr></table></figure>
<h3 id="打印字符串"><a href="#打印字符串" class="headerlink" title="打印字符串"></a>打印字符串</h3><p>我们可以用<code>print()</code>打印字符串。</p>
<p>Python允许用<code>r&#39;&#39;</code>标识<code>&#39;&#39;</code>内部的字符默认不转义。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'\\\t\\'</span>)</div><div class="line">\    \</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">r'\\\t\\'</span>)</div><div class="line">\\\t\\</div></pre></td></tr></table></figure>
<p>如果字符串换行很多，写一行看着难受。Python还支持使用<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>标识多行内容</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'''line1</span></div><div class="line"><span class="string">line2</span></div><div class="line"><span class="string">line3'''</span>)</div><div class="line"></div><div class="line">line1</div><div class="line">line2</div><div class="line">line3</div></pre></td></tr></table></figure>
<h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><p>在其他很多语言中我们用<code>True</code>、<code>False</code>标识布尔值，Python也不例外。</p>
<p>在Python中，布尔值可以用<code>and</code>、<code>or</code>和<code>not</code>运算。</p>
<p><code>and</code>是与运算</p>
<p><code>or</code>是或运算</p>
<p><code>not</code>是非运算</p>
<h2 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h2><p>空值是Python中一个特殊值，用<code>None</code>表示。</p>
<p>注意 <code>None</code>不是<code>0</code>，<code>0</code>是有意义的。</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量不仅可以是数字，还可以是任意数据类型。</p>
<p>变量名必须是大小写英文、数字和<code>_</code>的组合。且不能以数字开头</p>
<p>Python是一门动态语言，变量本身类型不固定。我们可以把任意数据类型赋值给变量，同一个变量可以反复赋值。</p>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>Python中常量一般都是全部大写。</p>
<p>事实上Python没有任何机制保证常量不会改变。所以全部大写常量名字只是一种习惯。</p>
<h2 id="list与tuple"><a href="#list与tuple" class="headerlink" title="list与tuple"></a>list与tuple</h2><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>Python中有列表<code>list</code>这种数据类型，是有序的集合，可以随时添加删除期中的元素。有点像objc中的MutableArray</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//list</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>classmates = [<span class="string">'Reus'</span>, <span class="string">'Reus1'</span>, <span class="string">'Rues2'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>classmates </div><div class="line">[<span class="string">'Reus'</span>, <span class="string">'Reus1'</span>, <span class="string">'Reus2'</span>]</div><div class="line">//空list</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = []</div></pre></td></tr></table></figure>
<p>我们可以用<code>len()</code>获得list元素的个数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(classmates)</div><div class="line"><span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(c)</div><div class="line"><span class="number">0</span></div></pre></td></tr></table></figure>
<p>还可以用索引访问list的元素，甚至还可以直接获取倒数得到的数据</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>classmates[<span class="number">0</span>]</div><div class="line"><span class="string">'Reus'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>classmates[<span class="number">1</span>]</div><div class="line"><span class="string">'Reus1'</span></div><div class="line"></div><div class="line">//溢出</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>classmates[<span class="number">3</span>]</div><div class="line">Traceback (most recent call last):</div><div class="line">  File<span class="string">"&lt;stdin&gt;"</span>. line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">IndexError: list index out of range</div><div class="line">  </div><div class="line">//查看最后一个元素</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>classmates[<span class="number">-1</span>]</div><div class="line"><span class="string">'Reus2'</span></div><div class="line">//倒数第二个</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>classmates[<span class="number">-2</span>]</div><div class="line"><span class="string">'Reus1'</span></div><div class="line">//越界溢出</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>classmates[<span class="number">-4</span>]</div><div class="line">Traceback (most recent call last):</div><div class="line">  File<span class="string">"&lt;stdin&gt;"</span>. line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">IndexError: list index out of range</div><div class="line"></div><div class="line">  //追加元素</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>classmates.append(<span class="string">'Boy'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>classmates</div><div class="line">[<span class="string">'Reus'</span>, <span class="string">'Reus1'</span>, <span class="string">'Reus2'</span>, <span class="string">'Boy'</span>]</div><div class="line"></div><div class="line">//插入元素到指定位置</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>classmates.insert(<span class="number">1</span>,<span class="string">'May'</span>)</div><div class="line">[<span class="string">'Reus'</span>, <span class="string">'May'</span>, <span class="string">'Reus1'</span>, <span class="string">'Reus2'</span>, <span class="string">'Boy'</span>]</div><div class="line"></div><div class="line">//删除末尾元素</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>classmates.pop()</div><div class="line"><span class="string">'Boy'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>classmates </div><div class="line">[<span class="string">'Reus'</span>, <span class="string">'May'</span>, <span class="string">'Reus1'</span>, <span class="string">'Reus2'</span>]</div><div class="line"></div><div class="line">//删除指定位置元素</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>classmates.pop(<span class="number">1</span>)</div><div class="line"><span class="string">'May'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>classmates</div><div class="line">[<span class="string">'Reus'</span>, <span class="string">'Reus1'</span>, <span class="string">'Reus2'</span>]</div><div class="line"></div><div class="line">//替换元素</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>classmates[<span class="number">1</span>] = <span class="string">'Boy'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>classmates</div><div class="line">[<span class="string">'Reus'</span>, <span class="string">'Boy'</span>, <span class="string">'Reus2'</span>]</div></pre></td></tr></table></figure>
<p><code>list</code>里的数据类型也可以不同，可以是整型，可以是字符串，还可以是布尔值</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>L = [<span class="string">'Apple'</span>, <span class="number">123</span>, <span class="keyword">True</span>]</div></pre></td></tr></table></figure>
<p>也可以是另一个list</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>M = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(M)</div><div class="line"><span class="number">4</span></div></pre></td></tr></table></figure>
<h3 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h3><p>tuple和list非常相似，但是tuple一旦初始化就不能修改（除非里面有个list)。有点像objc中的NSArray</p>
<p>因为tuple不可变，所以相对来说是更安全的。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//定义tuple</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="number">1</span>,<span class="number">2</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t</div><div class="line">(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"></div><div class="line">//定义一个空的tuple</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t =()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t </div><div class="line">()</div><div class="line"></div><div class="line">//定义一个元素的tuple</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="number">1</span>,)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t </div><div class="line">(<span class="number">1</span>,)</div><div class="line">/**Python在显示只有一个的tuple时，也会加一个逗号，防止我们误解成数学上的括号**/</div></pre></td></tr></table></figure>
<h1 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h1><p>Python中也有<code>if - else</code>语句</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">age = <span class="number">20</span></div><div class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</div><div class="line">  	print(<span class="string">'your age is'</span>,age)</div><div class="line">    print(<span class="string">'adult'</span>)</div></pre></td></tr></table></figure>
<p>如果<code>if</code>判断为<code>True</code>，就把缩进的两行print语句执行了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">age = <span class="number">3</span></div><div class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</div><div class="line">  print(<span class="string">'adult'</span>)</div><div class="line"><span class="keyword">elif</span> age &gt;=<span class="number">6</span>:</div><div class="line">  print(<span class="string">'tennager'</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">  print(<span class="string">'kid'</span>)</div></pre></td></tr></table></figure>
<p>和你想的一样，这个<code>elif</code>是<code>else if</code>的缩写</p>
<p><code>if</code>的特点是从上往下判断，如果上面有一个判断为<code>True</code>，就会忽略掉剩下的<code>elif</code>和<code>else</code>。</p>
<h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><p>Python的循环有两种，一种是<code>for...in</code>循环，另一种是<code>while</code>循环</p>
<h2 id="for-in"><a href="#for-in" class="headerlink" title="for..in"></a>for..in</h2><p><code>for x in ...</code>循环就是把每个元素带入变量<code>x</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//<span class="number">1</span><span class="number">-10</span>累加</div><div class="line">sum = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]:</div><div class="line">  	sum = sum + x</div><div class="line">print(sum)</div></pre></td></tr></table></figure>
<p>但只做累加  想加到1000页不可能一直手写。还好有<code>range()</code>函数，可生成一个整数序列，再通过<code>list()</code>可以转换为list</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(range(<span class="number">5</span>))</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div></pre></td></tr></table></figure>
<h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><p>这个循环大家学啥语言基本都会遇到，也就不多赘述了</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sum = <span class="number">0</span></div><div class="line">n = <span class="number">99</span></div><div class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:      //只要条件为真就一直循环</div><div class="line">  sum = sum + n</div><div class="line">  n = n - <span class="number">2</span></div><div class="line">print(sum)</div></pre></td></tr></table></figure>
<h1 id="dict和set"><a href="#dict和set" class="headerlink" title="dict和set"></a>dict和set</h1><h2 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h2><p>Python内置了字典，也就是dict(dictionary)。和objc一样，使用键-值(key-value)存储。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">'Michael'</span>:<span class="number">95</span>, <span class="string">'Bob'</span>:<span class="number">75</span>, <span class="string">'Tracy'</span>:<span class="number">85</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'Michael'</span>]</div><div class="line"><span class="number">95</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'Adam'</span>] = <span class="number">67</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'Adam'</span>]</div><div class="line"><span class="number">67</span></div></pre></td></tr></table></figure>
<p>一个key只对应一个value没所以多次对一个key放入value，后面的值会覆盖掉前面。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'jack'</span>] = <span class="number">90</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'jack'</span>] </div><div class="line"><span class="number">90</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'jack'</span>] = <span class="number">88</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'jack'</span>]</div><div class="line"><span class="number">88</span></div><div class="line"></div><div class="line">//检查key是否存在</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Thomas'</span> <span class="keyword">in</span> d</div><div class="line"><span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d.get(<span class="string">'Thomas'</span>)      //可返回<span class="keyword">None</span>(交互命令行不显示结果)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d.get(<span class="string">'Thomas'</span>,<span class="number">-1</span>)	//或者自己写的value</div><div class="line"><span class="number">-1</span></div></pre></td></tr></table></figure>
<p>dict内部存放的顺序和key放入的顺序没有关系。</p>
<p>dict的key必须是不可变对象</p>
<h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p>set和dict类似，也是一组key的集合，但是不存value。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s</div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</div><div class="line">//因为key不能重复，所以set中重复元素自动被过滤</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = set&#123;[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>]&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s </div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</div><div class="line"></div><div class="line">//添加元素</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.add(<span class="number">4</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s </div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.add(<span class="number">4</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s </div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</div><div class="line"></div><div class="line"></div><div class="line">//删除元素</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.remove(<span class="number">4</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s</div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</div></pre></td></tr></table></figure>
<p>set可看成数学意义上的无序无重复元素的集合，所以两个st可以做交并集等操作</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = set([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1 &amp; s2</div><div class="line">&#123;<span class="number">2</span>, <span class="number">3</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1 | s2</div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</div></pre></td></tr></table></figure>
<p><strong>set同样不能放入可变对象</strong></p>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h2><p>Python内置了很多函数，我们可以直接调用(比如绝对值函数abs)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//调用abs函数</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>abs(<span class="number">100</span>)</div><div class="line"><span class="number">100</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>abs(<span class="number">-20</span>)</div><div class="line"><span class="number">20</span></div></pre></td></tr></table></figure>
<p>如果传入的参数不对，会报<code>TypeError</code>的错误</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//数据类型转换</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="number">12.34</span>)</div><div class="line"><span class="number">12</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str(<span class="number">1.23</span>)</div><div class="line"><span class="string">'1.23'</span></div><div class="line"></div><div class="line">//把函数名赋给变量</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = abs</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a(<span class="number">-1</span>)</div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure>
<h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><p>在Python中，定义一个函数要使用<code>def</code>语句，依次写出函数名、括号、括号中的参数和冒号，最后，在缩进块中编写函数体，用<code>return</code>返回。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//自定义函数</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_abs</span><span class="params">(x)</span>:</span></div><div class="line">  <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</div><div class="line">    <span class="keyword">return</span> x</div><div class="line">  <span class="keyword">else</span>:</div><div class="line">    <span class="keyword">return</span> -x</div></pre></td></tr></table></figure>
<p>如果我们把<code>my_abs()</code>的函数定义保存为<code>abstest.py</code>，那么，可以在该目录下启动Python解释器。用<code>from abstest import my_abs</code>来导入<code>my_abs()</code>函数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//定义空函数</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">nop</span><span class="params">()</span>:</span></div><div class="line">  <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p><code>pass</code>可用来做占位符，比如我们还没想好写什么，可以先放一个<code>pass</code>让代码跑起来</p>
<p><strong>Python是可以返回多个值的</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(x, y, step, angle=<span class="number">0</span>)</span>:</span></div><div class="line">  nx = x + step * math.cos(angle)</div><div class="line">  ny = y - step * math.sin(angle)</div><div class="line">  <span class="keyword">return</span> nx, ny</div></pre></td></tr></table></figure>
<p>其实返回的值并不是严格意义上的多值，而是一个tuple。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><hr>
<p><a href="https:www.liaoxuefeng.com" target="_blank" rel="external">廖雪峰的官方网站</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;因为最近没事干想学下爬虫玩一下，顺便因为自己是信息安全专业，学一下py应该还蛮有趣的。&lt;/p&gt;
&lt;p&gt;​
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>奇特的autorelease</title>
    <link href="http://yoursite.com/2017/09/17/About%20autorelease/"/>
    <id>http://yoursite.com/2017/09/17/About autorelease/</id>
    <published>2017-09-17T07:06:48.000Z</published>
    <updated>2019-11-10T07:00:43.228Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>一说到 Objective-C 的内存管理，就不得不提到 Autorelease。</p>
<p>顾名思义，autorelease 就是自动释放，这看起来很 ARC，但其实它更像 C语言 中的局部变量特性。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">	因超出变量作用域</span></div><div class="line"><span class="comment">	局部变量 int a 被废弃。</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure>
<p>​    <a id="more"></a></p>
<p>​    一般来说，autorelease 会像 C语言 的局部变量那样对待对象的实例，一旦超出作用域，对象实例的 release 方法就被调用。还有一点就是编程人员可以设定变量的作用域。</p>
<p>使用方法大致如下：</p>
<ul>
<li>生成并持有 NSAutoreleasePool 对象</li>
<li>调用已分配对象的 autorelease 实例方法</li>
<li>废弃 NSAutoreleasePool 对象</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//表示如下</span></div><div class="line"><span class="built_in">NSAutoreleasePool</span> *pool = [[[<span class="built_in">NSAutoreleasePool</span> alloc]init]autorealease];</div><div class="line"><span class="keyword">id</span> obj = [[<span class="built_in">NSObject</span> alloc] init];</div><div class="line">[pool drain];</div><div class="line"><span class="comment">//相当于[obj release]对象被释放</span></div></pre></td></tr></table></figure>
<p>但是，为什么说是一般情况下 autorelease 像 C语言 的局部变量一样呢。</p>
<p>这就涉及到 autorelease 的原理机制了</p>
<h1 id="Autorelease"><a href="#Autorelease" class="headerlink" title="Autorelease"></a>Autorelease</h1><p>其实在没有人工添加 Autoreleasepool 的情况下，Autorealease 对象是在当前的<code>runloop</code>结束时释放的，而它能释放的原因也是系统在每个 runloop 中都加入了自动释放池 push 和 pop。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">__<span class="keyword">weak</span> <span class="keyword">id</span> reference = <span class="literal">nil</span>;</div><div class="line">-(<span class="keyword">void</span>)viewdidLoad&#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">  <span class="built_in">NSString</span> *str = [<span class="built_in">NSString</span> string WithFormat:<span class="string">@"Reus"</span>];</div><div class="line">  <span class="comment">//str是一个autorelease对象，设置一个weak的引用来观察它</span></div><div class="line">  reference = str;</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>) viewWillAppear:(<span class="built_in">BOOL</span>)animated&#123;</div><div class="line">    [<span class="keyword">super</span> viewWillAppear:animated];</div><div class="line">  <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,reference); <span class="comment">//Console: Reus</span></div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)viewDidAppear:(<span class="built_in">BOOL</span>)animated&#123;</div><div class="line">    [<span class="keyword">super</span> viewDidAppear:animated];</div><div class="line">  <span class="built_in">NSlog</span>(<span class="string">@"%@"</span>,reference);<span class="comment">//Console: (null)</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为这个 vc 在 loadView 之后就 add 到了 window 上，所以<code>viewDidLoad</code>和<code>viewWillAppear</code>是在同一个 runloop 调用的，因此在<code>viewWillAppear</code>中，这个 autorelease 的变量依然有值。</p>
<p>当然我们也可以手动干预</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)viewDidLoad&#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">  <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">      <span class="built_in">NSString</span> *str = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"Reus"</span>];</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,str); <span class="comment">//Console: (null)</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="AutoreleasePoolPage"><a href="#AutoreleasePoolPage" class="headerlink" title="AutoreleasePoolPage"></a>AutoreleasePoolPage</h2><p>ARC 下，我们用<code>@autoreleasepool{}</code>来使用一个 AutoreleasePool，随后编译器会转化为这样</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> *context = objc_autoreleasePoolPush();</div><div class="line"><span class="comment">//&#123;&#125;中的代码</span></div><div class="line">objc_autoreleasePoolPop(context);</div></pre></td></tr></table></figure>
<p>这两个函数都是对<code>AutoreleasePoolPage</code>的简单封装，所以自动释放机制核心在于这个类.</p>
<p><code>AutoreleasePoolPage</code>是一个 C++ 实现的类</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//AutoreleasePoolPage</span></div><div class="line"><span class="keyword">magic_t</span> <span class="keyword">const</span> magic;</div><div class="line">id *next;</div><div class="line"><span class="keyword">pthread_t</span> <span class="keyword">const</span> thread;</div><div class="line">AutoreleasePoolPage * <span class="keyword">const</span> parent;</div><div class="line">AutoreleasePoolPage *child;</div><div class="line"><span class="keyword">uint32_t</span> <span class="keyword">const</span> depth;</div><div class="line"><span class="keyword">uint32_t</span> hiwat;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutoreleasePoolPage</span>&#123;</span></div><div class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> *<span class="title">push</span><span class="params">()</span> <span class="comment">//相当于生成或持有NSAutoreleasePool对象；</span></span></div><div class="line"><span class="function">	<span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> *<span class="title">pop</span><span class="params">(<span class="keyword">void</span> *token)</span> <span class="comment">//相当于废弃NSAutoreleasePool类对象</span></span></div><div class="line"><span class="function">	id *<span class="title">add</span><span class="params">(id obj)</span> <span class="comment">//将对象追加到内部数组中</span></span></div><div class="line"><span class="function">    <span class="keyword">void</span> <span class="title">releaseAll</span><span class="params">()</span><span class="comment">//调用内部数组中对象的release实例方法</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">objc_autoreleasePoolPush</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">return</span> AutoreleasePoolPage::push();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">objc_autoreleasepoolPop</span><span class="params">(<span class="keyword">void</span> *ctxt)</span></span>&#123;</div><div class="line">    AutoreleasePoolPage::pop(ctxt);</div><div class="line">&#125;</div><div class="line"><span class="function">id *<span class="title">objc_autorelease</span><span class="params">(id obj)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> AutoreleasePoolPage::autorelease(obj);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>AutoreleasePool 并没有单独的结构，是由若干个 AutoreleasePoolPage 以<code>双向链表</code>的形式组合而成</li>
<li>AutoreleasePool 是按线程一一对应的(thread指针指向当前线程)</li>
<li>AutoreleasePoolPage 每个对象会开辟4096字节内存(虚拟内存一页的大小)，除了上面实例变量所占空间。剩下的全是用来存储 autorelease 对象的地址。</li>
<li>上面的<code>id *next</code>指针作为游标指向栈顶新Add进来的 autorelease 对象的下一个位置</li>
<li>一个 AutorelasepoolPage 的空间被占满时，会新建一个 AutoreleasePoolPage 对象，连接链表，后来的 autorelease 对象在新的 page 加入 </li>
</ul>
<p>向一个对象发送<code>-autorelease</code>消息，就是将这个对象加入到当前 AutoreleasePoolPage 的栈顶 next 指针所指向的位置</p>
<h2 id="释放"><a href="#释放" class="headerlink" title="释放"></a>释放</h2><p>每当进行一次<code>objc_autoreleasePoolPush</code>时，runtime 向当前的 AutoreleasePoolPage 中 add 进一个<code>哨兵对象</code>，值为0，<code>objc_autoreleasePoolPush</code>的返回值正是这个哨兵对象的地址，被<code>objc_autoreleasePoolPop()</code>作为入参变成<code>objc_autoreleasePoolPop(哨兵对象)</code>。</p>
<p>所以每次需要释放的时候 Runtime 会</p>
<ul>
<li>根据传入的哨兵对象地址找到哨兵对象所处的 page</li>
<li>在当前 page 中将晚于哨兵对象插入的所有 autorelease 发送一次<code>-release</code>消息，并向回移动<code>next</code>到正确位置</li>
</ul>
<h3 id="嵌套AutoreleasePool"><a href="#嵌套AutoreleasePool" class="headerlink" title="嵌套AutoreleasePool"></a>嵌套AutoreleasePool</h3><p>因为上面也讲到了，pop 的时候总是会释放到上次的 push 位置为止，而且AutoreleasePool 也只是双向链表，多层嵌套也就是插入了多个哨兵对象，一层一层一个哨兵一个哨兵的释放，就能做到互不影响。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><hr>
<p><a href="http://blog.sunnyxx.com" target="_blank" rel="external">sunnyxx的博客</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;一说到 Objective-C 的内存管理，就不得不提到 Autorelease。&lt;/p&gt;
&lt;p&gt;顾名思义，autorelease 就是自动释放，这看起来很 ARC，但其实它更像 C语言 中的局部变量特性。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	因超出变量作用域&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	局部变量 int a 被废弃。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;​
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS内存管理 - ARC</title>
    <link href="http://yoursite.com/2017/09/13/iOS_ARC/"/>
    <id>http://yoursite.com/2017/09/13/iOS_ARC/</id>
    <published>2017-09-13T08:31:46.000Z</published>
    <updated>2019-11-10T07:00:43.251Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>众所周知，Apple从OS X Lion和iOS 5引入了新的内存管理功能——自动引用计数(ARC)功能。这些功能对于我们开发者说也是需要去了解的一个重要知识点。</p>
<p>​    <a id="more"></a></p>
<h1 id="自动引用计数"><a href="#自动引用计数" class="headerlink" title="自动引用计数"></a>自动引用计数</h1><hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">在Objective-C中采用Automatic Reference Counting机制，让编译器来进行内存管理。</div><div class="line">在新一代Apple LLVM编译器中设置ARC为有效状态，就无需在此键入retain和release代码，</div><div class="line">这在降低程序崩溃、内存泄漏等风险的同时，很大程度上减少了开发程序的工作量。</div><div class="line">编译器完全清楚目标对象，并能立刻释放那些不再被使用的对象。</div><div class="line">如此一来，应用程序将具有可预测性，且能流畅运行，速度也将大幅提升。</div><div class="line">								--------- Apple</div></pre></td></tr></table></figure>
<p>ARC的机制可以用开关房间里的灯的事例来说明：</p>
<ul>
<li>进入房间的人需要灯光照明。</li>
<li>离开房间的人不需要灯光照明。</li>
<li>如果离开房间的人因不需要照明而把灯关掉，那房间里剩下的人则不能得到照明。</li>
</ul>
<p>解决办法就是使房间还有至少1人的情况下保持开灯，无人时关灯。</p>
<p>为了判断是否还有人在房间里，我们导入计数功能来计算“需要照明的人数”：</p>
<ul>
<li>第一个人进入房间，“需要照明人数”+1，计数值由0变为1</li>
<li>之后每有一个人进入房间，“需要照明人数”就+1。</li>
<li>每当有人离开房间，“需要照明人数”就-1 。</li>
<li>最后一个人下班离开房间时，“需要照明人数”就从1减到了0，所以要关灯。</li>
</ul>
<p>我们将这个事例套入到objc的中，对应的关系如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">对照明设备所做操作</th>
<th style="text-align:left">对objc对象所做动作</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">开灯</td>
<td style="text-align:left">生成对象</td>
</tr>
<tr>
<td style="text-align:left">需要照明</td>
<td style="text-align:left">持有对象</td>
</tr>
<tr>
<td style="text-align:left">不需要照明</td>
<td style="text-align:left">释放对象</td>
</tr>
<tr>
<td style="text-align:left">关灯</td>
<td style="text-align:left">废弃对象</td>
</tr>
</tbody>
</table>
<p>上述中的<code>生成</code>、<code>持有</code>、<code>释放</code>、<code>废弃</code>概念可以对应objc的这些方法：</p>
<table>
<thead>
<tr>
<th>对象操作</th>
<th>Objective-C方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>生成并持有对象</td>
<td>alloc/new/copy/mutableCopy等方法</td>
</tr>
<tr>
<td>持有对象</td>
<td>retain方法</td>
</tr>
<tr>
<td>释放对象</td>
<td>release方法</td>
</tr>
<tr>
<td>废弃对象</td>
<td>dealloc方法</td>
</tr>
</tbody>
</table>
<h2 id="ARC规则"><a href="#ARC规则" class="headerlink" title="ARC规则"></a>ARC规则</h2><p>在ARC有效的情况下编译源代码，需要遵守一定的规则：</p>
<ul>
<li>不能使用/retain/release/retainCount/autorelease</li>
<li>不能使用NSAllocateObject/NSDeallocateObject</li>
<li>须遵守内存管理的方法命名规则</li>
<li>不要显式调用dealloc（别用[super dealloc]）</li>
<li>使用@autoreleasepool块替代NSAutoreleasePool</li>
<li>不能使用NSZone</li>
<li>对象型变量不能作为C语言结构体(struct/union)的成员</li>
<li>转换id和void *(__bridge)</li>
</ul>
<h1 id="引用计数的储存"><a href="#引用计数的储存" class="headerlink" title="引用计数的储存"></a>引用计数的储存</h1><hr>
<p>objc中有些对象如果支持使用TaggedPointer，苹果会直接将其指针值作为引用计数返回。</p>
<p>如果当前设备是64位环境并且使用objective-c 2.0，那么“一些”对象会使用其<code>isa</code>指针的一部分控件来存储它的引用计数。</p>
<h2 id="TaggedPointer"><a href="#TaggedPointer" class="headerlink" title="TaggedPointer"></a>TaggedPointer</h2><p>判断当前对象是否在使用TaggedPointer(观察标志位是否为1)</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#if SUPPORT_MSB_TAGGED_POINTERS</span></div><div class="line"><span class="meta">#   define TAG_MASK (1ULL<span class="meta-string">&lt;&lt;63)</span></span></div><div class="line"><span class="meta"><span class="meta-string">#else</span></span></div><div class="line"><span class="meta"><span class="meta-string">#   define TAG_MASK 1</span></span></div><div class="line"><span class="meta"><span class="meta-string"></span></span></div><div class="line"><span class="meta"><span class="meta-string">inline bool </span></span></div><div class="line"><span class="meta"><span class="meta-string">objc_object::isTaggedPointer() </span></span></div><div class="line"><span class="meta"><span class="meta-string">&#123;</span></span></div><div class="line"><span class="meta"><span class="meta-string">#if SUPPORT_TAGGED_POINTERS</span></span></div><div class="line"><span class="meta"><span class="meta-string">    return ((uintptr_t)this &amp; TAG_MASK);</span></span></div><div class="line"><span class="meta"><span class="meta-string">#else</span></span></div><div class="line"><span class="meta"><span class="meta-string">    return false;</span></span></div><div class="line"><span class="meta"><span class="meta-string">#endif</span></span></div><div class="line"><span class="meta"><span class="meta-string">&#125;</span></span></div></pre></td></tr></table></figure>
<p><code>Objc_object *</code>看似很陌生，其实它的简写就是我们常看到的<code>id</code>(<code>typedef struct objc_object *id;</code>)。它的<code>isTaggedPointer</code>方法经常会在操作引用计数时用到，因为这决定了存储引用计数的策略。</p>
<h2 id="isa指针-NONPOINTER-ISA"><a href="#isa指针-NONPOINTER-ISA" class="headerlink" title="isa指针(NONPOINTER_ISA)"></a>isa指针(NONPOINTER_ISA)</h2><p>用64 bit存储地址太浪费了，于是优化存储方案，用一部分额外空间存储其他内容。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">union</span> isa_t </div><div class="line">&#123;</div><div class="line">    isa_t() &#123; &#125;</div><div class="line">    isa_t(uintptr_t value) : bits(value) &#123; &#125;</div><div class="line"></div><div class="line">    Class cls;</div><div class="line">    uintptr_t bits;</div><div class="line"></div><div class="line"><span class="meta">#if SUPPORT_NONPOINTER_ISA</span></div><div class="line"><span class="meta"># if __arm64__</span></div><div class="line"><span class="meta">#   define ISA_MASK        0x00000001fffffff8ULL</span></div><div class="line"><span class="meta">#   define ISA_MAGIC_MASK  0x000003fe00000001ULL</span></div><div class="line"><span class="meta">#   define ISA_MAGIC_VALUE 0x000001a400000001ULL</span></div><div class="line">    <span class="keyword">struct</span> &#123;</div><div class="line">        uintptr_t indexed           : <span class="number">1</span>;</div><div class="line">        uintptr_t has_assoc         : <span class="number">1</span>;</div><div class="line">        uintptr_t has_cxx_dtor      : <span class="number">1</span>;</div><div class="line">        uintptr_t shiftcls          : <span class="number">30</span>; <span class="comment">// MACH_VM_MAX_ADDRESS 0x1a0000000</span></div><div class="line">        uintptr_t magic             : <span class="number">9</span>;</div><div class="line">        uintptr_t weakly_referenced : <span class="number">1</span>;</div><div class="line">        uintptr_t deallocating      : <span class="number">1</span>;</div><div class="line">        uintptr_t has_sidetable_rc  : <span class="number">1</span>;</div><div class="line">        uintptr_t extra_rc          : <span class="number">19</span>;</div><div class="line"><span class="meta">#       define RC_ONE   (1ULL<span class="meta-string">&lt;&lt;45)</span></span></div><div class="line"><span class="meta"><span class="meta-string">#       define RC_HALF  (1ULL&lt;&lt;18)</span></span></div><div class="line"><span class="meta"><span class="meta-string">    &#125;;</span></span></div><div class="line"><span class="meta"><span class="meta-string"></span></span></div><div class="line"><span class="meta"><span class="meta-string"># elif __x86_64__</span></span></div><div class="line"><span class="meta"><span class="meta-string">#   define ISA_MASK        0x00007ffffffffff8ULL</span></span></div><div class="line"><span class="meta"><span class="meta-string">#   define ISA_MAGIC_MASK  0x0000000000000001ULL</span></span></div><div class="line"><span class="meta"><span class="meta-string">#   define ISA_MAGIC_VALUE 0x0000000000000001ULL</span></span></div><div class="line"><span class="meta"><span class="meta-string">    struct &#123;</span></span></div><div class="line"><span class="meta"><span class="meta-string">        uintptr_t indexed           : 1;</span></span></div><div class="line"><span class="meta"><span class="meta-string">        uintptr_t has_assoc         : 1;</span></span></div><div class="line"><span class="meta"><span class="meta-string">        uintptr_t has_cxx_dtor      : 1;</span></span></div><div class="line"><span class="meta"><span class="meta-string">        uintptr_t shiftcls          : 44; // MACH_VM_MAX_ADDRESS 0x7fffffe00000</span></span></div><div class="line"><span class="meta"><span class="meta-string">        uintptr_t weakly_referenced : 1;</span></span></div><div class="line"><span class="meta"><span class="meta-string">        uintptr_t deallocating      : 1;</span></span></div><div class="line"><span class="meta"><span class="meta-string">        uintptr_t has_sidetable_rc  : 1;</span></span></div><div class="line"><span class="meta"><span class="meta-string">        uintptr_t extra_rc          : 14;</span></span></div><div class="line"><span class="meta"><span class="meta-string">#       define RC_ONE   (1ULL&lt;&lt;50)</span></span></div><div class="line"><span class="meta"><span class="meta-string">#       define RC_HALF  (1ULL&lt;&lt;13)</span></span></div><div class="line"><span class="meta"><span class="meta-string">    &#125;;</span></span></div><div class="line"><span class="meta"><span class="meta-string"></span></span></div><div class="line"><span class="meta"><span class="meta-string"># else</span></span></div><div class="line"><span class="meta"><span class="meta-string">    // Available bits in isa field are architecture-specific.</span></span></div><div class="line"><span class="meta"><span class="meta-string">#   error unknown architecture</span></span></div><div class="line"><span class="meta"><span class="meta-string"># endif</span></span></div><div class="line"><span class="meta"><span class="meta-string"></span></span></div><div class="line"><span class="meta"><span class="meta-string">// SUPPORT_NONPOINTER_ISA</span></span></div><div class="line"><span class="meta"><span class="meta-string">#endif</span></span></div><div class="line"><span class="meta"><span class="meta-string"></span></span></div><div class="line"><span class="meta"><span class="meta-string">&#125;;</span></span></div></pre></td></tr></table></figure>
<p><code>SUPPORT_NONPOINTER_ISA</code>用于标记是否支持优化的<code>isa</code>指针。</p>
<p>字面意思是<code>isa</code>的内容不再是类的指针了，还包含了更多的信息，例如引用计数，析构状态，被其他weak变量引用情况。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Define SUPPORT_NONPOINTER_ISA=1 to enable extra data in the isa field.</span></div><div class="line"><span class="meta">#if !__LP64__  ||  TARGET_OS_WIN32  ||  TARGET_IPHONE_SIMULATOR  ||  __x86_64__</span></div><div class="line"><span class="meta">#   define SUPPORT_NONPOINTER_ISA 0</span></div><div class="line"><span class="meta">#else</span></div><div class="line"><span class="meta">#   define SUPPORT_NONPOINTER_ISA 1</span></div><div class="line"><span class="meta">#endif</span></div></pre></td></tr></table></figure>
<p>以下是<code>isa</code>指针中变量的对应含义</p>
<table>
<thead>
<tr>
<th>变量名</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>indexed</td>
<td>0表示普通的<code>isa</code>指针，1表示使用优化，存储引用计数</td>
</tr>
<tr>
<td>has_assoc</td>
<td>表示该对象是否包含associated object，如果没有，则析构时会更快</td>
</tr>
<tr>
<td>has_cxx_dtor</td>
<td>表示该对象是否有C++或者ARC的析构函数，如果没有，则析构时更快</td>
</tr>
<tr>
<td>shiftcls</td>
<td>类的指针</td>
</tr>
<tr>
<td>magic</td>
<td>固定值为0xd2，用于在调试时分辨对象是否未完成初始化。</td>
</tr>
<tr>
<td>weakly_referenced</td>
<td>表示该对象是否有过<code>weak</code>对象，如果没有，则析构时更快</td>
</tr>
<tr>
<td>deallocating</td>
<td>表示该对象是否正在析构</td>
</tr>
<tr>
<td>has_sidetable_rc</td>
<td>表示该对象的引用计数值是否过大无法存储在<code>isa</code>指针中</td>
</tr>
<tr>
<td>extra_rc</td>
<td>存储引用计数值减一后的结果</td>
</tr>
</tbody>
</table>
<p>在64位环境下，优化的<code>isa</code>指针并不是就一定会存储引用计数，19bit的iOS系统保存引用计数不一定够，这19位保存的是引用计数值减一后的值。</p>
<p><code>has_sidetable_rc</code>的值如果为1，那么引用计数会存储在一个叫<code>SideTable</code>的类的属性中。</p>
<h2 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h2><p>散列表来存储引用计数具体是用<code>DenseMap</code>类来实现，这个类中包含好多映射实例到其引用计数的键值对，并支持用<code>DenseMapIterator</code>迭代器快速查找遍历这些键值对。</p>
<p>键值对的格式：</p>
<ul>
<li>键的类型为<code>DisguisedPtr&lt;objc_object&gt;</code>，<code>DisguisedPtr</code>类是对<code>objc_object *</code>指针及其一些操作进行的封装，内容我们可以理解为对象的内存地址</li>
<li>值的类型为<code>__darwin_size_t</code>。这里保存的值其实就是引用计数减一。</li>
</ul>
<p>用散列表保存引用计数的优势也很明显，即如果出现故障导致对象的内存块损坏，只要引用计数表没有被破坏，依然可以顺藤摸瓜找到内存块的地址。</p>
<h2 id="获取引用计数"><a href="#获取引用计数" class="headerlink" title="获取引用计数"></a>获取引用计数</h2><p>在非ARC环境，可以使用<code>retainCount</code>方法获取某个对象的引用计数，其会调用<code>objc_object</code>的<code>rootRetainCount()</code>方法：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSUInteger</span>)retainCount&#123;</div><div class="line">    <span class="keyword">return</span> ((<span class="keyword">id</span>)<span class="keyword">self</span>)-&gt;rootRetainCount();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ARC时代除了使用Core Foundation库中的<code>CFGetRetainCount()</code>，也可以用Runtime的<code>_objc_rootRetainCount(id obj)</code>方法来获取引用计数，此时需要引入<code>&lt;objc/runtime.h&gt;</code>头文件。这个函数也是调用<code>objc_object</code>的<code>rootRetainCount()</code>方法：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">inline</span> uintptr_t </div><div class="line">objc_object::rootRetainCount()</div><div class="line">&#123;</div><div class="line">    assert(!UseGC);</div><div class="line">    <span class="keyword">if</span> (isTaggedPointer()) <span class="keyword">return</span> (uintptr_t)<span class="keyword">this</span>;</div><div class="line"></div><div class="line">    sidetable_lock();</div><div class="line">    isa_t bits = LoadExclusive(&amp;isa.bits);</div><div class="line">    <span class="keyword">if</span> (bits.indexed) &#123;</div><div class="line">        uintptr_t rc = <span class="number">1</span> + bits.extra_rc;</div><div class="line">        <span class="keyword">if</span> (bits.has_sidetable_rc) &#123;</div><div class="line">            rc += sidetable_getExtraRC_nolock();</div><div class="line">        &#125;</div><div class="line">        sidetable_unlock();</div><div class="line">        <span class="keyword">return</span> rc;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    sidetable_unlock();</div><div class="line">    <span class="keyword">return</span> sidetable_retainCount();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>rootRetainCount()</code>方法对引用计数存储逻辑进行了判断。</p>
<p>除开<code>TaggedPointer</code>和<code>isa</code>指针的存储方式，会用<code>sidetable_retainCount()</code>方法：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">uintptr_t</div><div class="line">objc_object::sidetable_retainCount()</div><div class="line">&#123;</div><div class="line">    SideTable *table = SideTable::tableForPointer(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">    size_t refcnt_result = <span class="number">1</span>;</div><div class="line">    </div><div class="line">    spinlock_lock(&amp;table-&gt;slock);</div><div class="line">    RefcountMap::iterator it = table-&gt;refcnts.find(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">if</span> (it != table-&gt;refcnts.end()) &#123;</div><div class="line">        <span class="comment">// this is valid for SIDE_TABLE_RC_PINNED too</span></div><div class="line">        refcnt_result += it-&gt;second &gt;&gt; SIDE_TABLE_RC_SHIFT;</div><div class="line">    &#125;</div><div class="line">    spinlock_unlock(&amp;table-&gt;slock);</div><div class="line">    <span class="keyword">return</span> refcnt_result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>sidetable_retainCount()</code>方法的逻辑就是先从<code>SideTable</code>的静态方法获取当前实例对应的<code>SideTable</code>对象，其<code>refcnts</code>属性就是之前说的存储引用计数的散列表，这里将其类型简写为<code>RefcountMap</code>：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> objc::DenseMap&lt;DisguisedPtr&lt;objc_object&gt;,size_t,<span class="literal">true</span>&gt; RefcountMap;</div></pre></td></tr></table></figure>
<p>然后引用计数表中用迭代器查找当前实例对应的键值对，获取引用计数值，并在此基础上加一返回。</p>
<p>我们可以看到有一个<code>it-&gt;second &gt;&gt; SIDE_TABLE_RC_SHIFT</code>方法将键值对的值做了向右移位的操作</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#ifdef __LP64__</span></div><div class="line"><span class="meta">#   define WORD_BITS 64</span></div><div class="line"><span class="meta">#else</span></div><div class="line"><span class="meta">#   define WORD_BITS 32</span></div><div class="line"><span class="meta">#endif</span></div><div class="line"></div><div class="line"><span class="comment">// The order of these bits is important.</span></div><div class="line"><span class="meta">#define SIDE_TABLE_WEAKLY_REFERENCED (1UL<span class="meta-string">&lt;&lt;0)</span></span></div><div class="line"><span class="meta"><span class="meta-string">#define SIDE_TABLE_DEALLOCATING      (1UL&lt;&lt;1)  // MSB-ward of weak bit</span></span></div><div class="line"><span class="meta"><span class="meta-string">#define SIDE_TABLE_RC_ONE            (1UL&lt;&lt;2)  // MSB-ward of deallocating bit</span></span></div><div class="line"><span class="meta"><span class="meta-string">#define SIDE_TABLE_RC_PINNED         (1UL&lt;&lt;(WORD_BITS-1))</span></span></div><div class="line"><span class="meta"><span class="meta-string"></span></span></div><div class="line"><span class="meta"><span class="meta-string">#define SIDE_TABLE_RC_SHIFT 2</span></span></div><div class="line"><span class="meta"><span class="meta-string">#define SIDE_TABLE_FLAG_MASK (SIDE_TABLE_RC_ONE-1)RefcountMap</span></span></div></pre></td></tr></table></figure>
<p>可以看出第一个bit表示该对象是否有过<code>weak</code>对象。</p>
<p>第二个bit表示对象是否正在析构。</p>
<p>第三个bit开始才是存储引用计数数值的地方。</p>
<p>所以要向右移两位。</p>
<p>可以用<code>SIDE_TABLE_RC_ONE</code>对引用计数+1和-1</p>
<p>用<code>SIDE_TABLE_RC_PINNED</code>来判断是否引用计数值有可能溢出。</p>
<p><code>_objc_rootRetainCount(id obj)</code>对于已释放的对象以及不正确的对象地址，有时也返回 “1”。它所返回的引用计数只是某个给定时间点上的值，该方法并未考虑到系统稍后会把自动释放吃池清空，因而不会将后续的释放操作从返回值里减去。clang 会尽可能把 NSString 实现成单例对象，其引用计数会很大。</p>
<p>如果使用了 TaggedPointer，NSNumber 的内容有可能就不再放到堆中，而是直接写在宽敞的64位栈指针值里。其看上去和真正的 NSNumber 对象一样，只是使用 TaggedPointer 优化了下，但其引用计数可能不准确。</p>
<p><strong>SideTable</strong></p>
<p>这里提一下<code>SideTable</code>，它用于管理引用计数表和<code>weak</code>表，并使用<code>spinlock_lock</code>自旋锁来防止操作表结构时可能的竞态条件。它用一个64*128大小的<code>uint8_t</code>静态数组保存所有<code>SideTable</code>实例，提供三个公有属性</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">spinlock_t slock; <span class="comment">//保证原子操作</span></div><div class="line">RefcountMap refcnts; <span class="comment">//保存引用计数的散列表</span></div><div class="line">weak_table_t weak_table;<span class="comment">//保存weak引用的全局散列表</span></div></pre></td></tr></table></figure>
<p>还有一个工厂方法</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> SideTable *tableForPointer(<span class="keyword">const</span> <span class="keyword">void</span> *p)</div><div class="line"><span class="comment">/** 根据对象的地址在buffer中寻找对应的SideTable实例 **/</span></div></pre></td></tr></table></figure>
<p><code>weak</code>表的作用是在对象执行<code>dealloc</code>的时候将所有指向该对象的<code>weak</code>指针的值设为<code>nil</code>，避免悬空指针。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//weak表的结构</span></div><div class="line"><span class="keyword">struct</span> weak_table_t&#123;</div><div class="line">    weak_entry_t *weak_entries;</div><div class="line">  size_t num_entries;</div><div class="line">  uintptr_t mask;</div><div class="line">  uintptr_t max_hash_displacement;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>苹果用一个全局<code>weak</code>表保存所有<code>weak</code>引用，将对象作为键，<code>weak_entry_t</code>作为值。<code>weak_entry_t</code>中保存了所有指向该对象的<code>weak</code>指针。</p>
<h2 id="修改引用计数"><a href="#修改引用计数" class="headerlink" title="修改引用计数"></a>修改引用计数</h2><h3 id="retain和release"><a href="#retain和release" class="headerlink" title="retain和release"></a>retain和release</h3><p>非ARC下，可用<code>retain</code>和<code>release</code>方法对引用计数进行加一减一操作，它们分别调用了<code>_objc_rootRetain(id obj)</code>和<code>_objc_rootRelease(id obj)</code>函数。后两者在ARC下也可以使用。</p>
<p>最后这两个函数会调用<code>objc_object</code>的两个方法：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">inline</span> <span class="keyword">id</span> </div><div class="line">objc_object::rootRetain()</div><div class="line">&#123;</div><div class="line">    assert(!UseGC);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (isTaggedPointer()) <span class="keyword">return</span> (<span class="keyword">id</span>)<span class="keyword">this</span>;</div><div class="line">    <span class="keyword">return</span> sidetable_retain();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> </div><div class="line">objc_object::rootRelease()</div><div class="line">&#123;</div><div class="line">    assert(!UseGC);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (isTaggedPointer()) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">return</span> sidetable_release(<span class="literal">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个实现和获得引用计数类似，先是看是否支持<code>TaggedPointer</code>，否则就用<code>SideTable</code>里的<code>refcnts</code>。</p>
<p><code>sidetable_retain()</code>将引用计数加一后返回对象。</p>
<p><code>sidetable_release()</code>返回是否要执行<code>dealloc</code>方法</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">沙漠中怎么会有泥鳅  <span class="number">11</span>:<span class="number">14</span>:<span class="number">20</span></div><div class="line"><span class="keyword">bool</span> </div><div class="line">objc_object::sidetable_release(<span class="keyword">bool</span> performDealloc)</div><div class="line">&#123;</div><div class="line"><span class="meta">#if SUPPORT_NONPOINTER_ISA</span></div><div class="line">    assert(!isa.indexed);</div><div class="line"><span class="meta">#endif</span></div><div class="line">    SideTable *table = SideTable::tableForPointer(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">    <span class="keyword">bool</span> do_dealloc = <span class="literal">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (spinlock_trylock(&amp;table-&gt;slock)) &#123;</div><div class="line">        RefcountMap::iterator it = table-&gt;refcnts.find(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">if</span> (it == table-&gt;refcnts.end()) &#123;</div><div class="line">            do_dealloc = <span class="literal">true</span>;</div><div class="line">            table-&gt;refcnts[<span class="keyword">this</span>] = SIDE_TABLE_DEALLOCATING;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (it-&gt;second &lt; SIDE_TABLE_DEALLOCATING) &#123;</div><div class="line">            <span class="comment">// SIDE_TABLE_WEAKLY_REFERENCED may be set. Don't change it.</span></div><div class="line">            do_dealloc = <span class="literal">true</span>;</div><div class="line">            it-&gt;second |= SIDE_TABLE_DEALLOCATING;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (! (it-&gt;second &amp; SIDE_TABLE_RC_PINNED)) &#123;</div><div class="line">            it-&gt;second -= SIDE_TABLE_RC_ONE;</div><div class="line">        &#125;</div><div class="line">        spinlock_unlock(&amp;table-&gt;slock);</div><div class="line">        <span class="keyword">if</span> (do_dealloc  &amp;&amp;  performDealloc) &#123;</div><div class="line">            ((<span class="keyword">void</span>(*)(objc_object *, SEL))objc_msgSend)(<span class="keyword">this</span>, SEL_dealloc);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> do_dealloc;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> sidetable_release_slow(table, performDealloc);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>it-&gt;second &lt; SIDE_TABLE_DEALLOCATING</code>查看存储的引用计数是否为0，这也是为什么之前存储引用计数时存的是<strong>真正的引用计数值减一后的值</strong>，是为了防止负数的产生。</p>
<p>如果查看存储的引用计数为0，则将对象标记为正在析构(<code>it-&gt;second |= SIDE_TABLE_DEALLOCATING</code>)，并发送<code>dealloc</code>消息，返回<code>YES</code>。</p>
<p>否则将引用计数减一（<code>it-&gt;second -+ SIDE_TABLE_RC_ONE</code>)。</p>
<p>Core Foundation库中也提供了增减引用计数的方法。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//CFBridgingRetain</span></div><div class="line"><span class="built_in">NS_INLINE</span> <span class="built_in">CF_RETURNS_RETAINED</span> <span class="built_in">CFTypeRef</span> __<span class="keyword">nullable</span> <span class="built_in">CFBridgingRetain</span>(<span class="keyword">id</span> __<span class="keyword">nullable</span> X) &#123;</div><div class="line">    <span class="keyword">return</span> (__bridge_retained <span class="built_in">CFTypeRef</span>)X;</div><div class="line">&#125;</div><div class="line"><span class="comment">//CFBridgingRelease</span></div><div class="line"><span class="built_in">NS_INLINE</span> <span class="keyword">id</span> __<span class="keyword">nullable</span> <span class="built_in">CFBridgingRelease</span>(<span class="built_in">CFTypeRef</span> <span class="built_in">CF_CONSUMED</span> __<span class="keyword">nullable</span> X) &#123;</div><div class="line">    <span class="keyword">return</span> (__bridge_transfer <span class="keyword">id</span>)X;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>CFBridgingRetain</code>和<code>CFBridgingRelease</code>这两个方法本质是使用<code>__bridge_retained</code>和<code>__bridge_transfer</code>告诉编译器此处需要如何修改引用计数。</p>
<p>除此之外，objc很多实现还是靠Runtime实现的，Objective-C Runtime源码中有些地方明确注明<code>//Replaced by CF</code>，意思就是说，这块任务被<code>Core Foundation</code>承包了。</p>
<h1 id="iOS的内存管理"><a href="#iOS的内存管理" class="headerlink" title="iOS的内存管理"></a>iOS的内存管理</h1><hr>
<p>引用计数机制是有些复杂，但是设计到内存管理的话，我们其实不必过多纠结引用计数，直接用以下思路来看待会好一些：</p>
<ul>
<li>自己生成的对象，自己持有。</li>
<li>非自己生成的对象，自己也可以持有。</li>
<li>不再需要自己持有的对象时释放。</li>
<li>非自己持有的对象无法释放。</li>
</ul>
<h2 id="自己生成的对象，自己持有"><a href="#自己生成的对象，自己持有" class="headerlink" title="自己生成的对象，自己持有"></a>自己生成的对象，自己持有</h2><p>使用以下名称开头的方法名意味着自己生成的对象只有自己持有：</p>
<ul>
<li>alloc</li>
<li>new</li>
<li>copy</li>
<li>mutableCopy</li>
</ul>
<h3 id="alloc-new"><a href="#alloc-new" class="headerlink" title="alloc/new"></a>alloc/new</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//自己生成并持有对象</span></div><div class="line"><span class="keyword">id</span> obj1 = [[<span class="built_in">NSObject</span> alloc] init];</div><div class="line"><span class="comment">//自己持有对象</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//自己生成并持有对象</span></div><div class="line"><span class="keyword">id</span> obj2 = [<span class="built_in">NSObject</span> new];</div><div class="line"><span class="comment">//自己持有对象</span></div></pre></td></tr></table></figure>
<p>一般来说，<code>[NSObject new]</code>与<code>[[NSObject alloc] init]</code>是完全一样的。</p>
<p>区别在于<code>alloc</code>因将关联对象内存分配到相邻区域从而更加省时省力。</p>
<p><code>alloc</code>也可以用自定义的<code>init</code>方法(例如<code>initWithFrame</code>)而new只能用默认的init。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">id</span></div><div class="line">_objc_rootAlloc(Class cls)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> callAlloc(cls, <span class="literal">false</span><span class="comment">/*checkNil*/</span>, <span class="literal">true</span><span class="comment">/*allocWithZone*/</span>);</div><div class="line">&#125;</div><div class="line">+ (<span class="keyword">id</span>)alloc &#123;</div><div class="line">    <span class="keyword">return</span> _objc_rootAlloc(<span class="keyword">self</span>);</div><div class="line">&#125;</div><div class="line">+ (<span class="keyword">id</span>)new &#123;</div><div class="line">    <span class="keyword">return</span> [callAlloc(<span class="keyword">self</span>, <span class="literal">false</span><span class="comment">/*checkNil*/</span>) init];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看得出来<code>alloc</code>和<code>new</code>最终都会调用<code>callAlloc</code>，默认使用Objective-C 2.0且忽视垃圾回收和NSZone。</p>
<p>后续调用顺序为：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">class_createInstance()</div><div class="line">_class_createInstanceFromeZone()</div><div class="line">calloc()</div></pre></td></tr></table></figure>
<p><code>calloc()</code>函数相比于<code>malloc()</code>优点在于它将分配的内存区域初始化为0，相当于<code>malloc()</code>后再<code>memset()</code>方法再初始化一次。</p>
<h3 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h3><p><code>copy</code>用基于NSCopying方法约定，由各类实现的<code>copyWithZone：</code>方法生成并持有对象的副本。与<code>copy</code>方法类似。</p>
<p><code>mutableCopy</code>利用基于<code>NSMutableCopying</code>方法约定，由各类实现的<code>mutableCopyWithZone：</code>方法生成并持有对象的副本。</p>
<p>区别在于，<code>copy</code>方法生成不可变更的对象，而<code>mutableCopy</code>生成可变更的对象。类似<code>NSArray</code>与<code>NSMutableArray</code>类对象的差异。这里还涉及到一个深浅拷贝的知识点。</p>
<p>两个方法虽然生成的是对象的副本，但是同<code>alloc</code>、<code>new</code>一样在<strong>自己生成并持有对象</strong>这点上没有改变。</p>
<h2 id="非自己生成的对象，自己也能持有"><a href="#非自己生成的对象，自己也能持有" class="headerlink" title="非自己生成的对象，自己也能持有"></a>非自己生成的对象，自己也能持有</h2><p>用上述方法以外的方法（即用<code>alloc</code>、<code>new</code>、<code>copy</code>和<code>mutableCopy</code>以外的方法）取得的对象，因为非自己生成持有，所以自己不是该对象的持有者。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//取得非自己生成并持有的对象</span></div><div class="line"><span class="keyword">id</span> obj = [<span class="built_in">NSMutableArray</span> array];</div><div class="line"><span class="comment">//取得的对象存在，但自己不持有对象</span></div><div class="line">[obj <span class="keyword">retain</span>];</div><div class="line"><span class="comment">//自己持有该对象</span></div></pre></td></tr></table></figure>
<p>通过<code>retain</code>方法，非自己生成的对象跟用<code>alloc/new/copy/mutableCopy</code>生成并持有的对象一样名称为了自己所持有的。</p>
<h2 id="不再需要自己持有的对象时释放"><a href="#不再需要自己持有的对象时释放" class="headerlink" title="不再需要自己持有的对象时释放"></a>不再需要自己持有的对象时释放</h2><p>自己持有的对象，一旦不需要，持有者有义务释放该对象。释放使用<code>release</code>方法。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//自己生成并持有对象</span></div><div class="line"><span class="keyword">id</span> obj = [[<span class="built_in">NSObject</span> alloc] init];</div><div class="line"><span class="comment">//自己持有对象</span></div><div class="line">[obj release];</div><div class="line"><span class="comment">/* </span></div><div class="line"><span class="comment">	释放对象</span></div><div class="line"><span class="comment">	</span></div><div class="line"><span class="comment">	指向对象的指针仍然被保留在变量obj中</span></div><div class="line"><span class="comment">	</span></div><div class="line"><span class="comment">	对象一经释放就不可被访问</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//取得非自己生成并持有的对象</span></div><div class="line"><span class="keyword">id</span> obj = [<span class="built_in">NSMutableArray</span> array];</div><div class="line"></div><div class="line"><span class="comment">//取得的对象存在 但自己不持有</span></div><div class="line"></div><div class="line">[obj <span class="keyword">retain</span>];</div><div class="line"></div><div class="line"><span class="comment">//持有对象</span></div><div class="line"></div><div class="line">[obj release];</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">	释放对象</span></div><div class="line"><span class="comment">	对象不可再被访问</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure>
<p>如果要用某个方法生成对象，并将其返还给该方法的调用方，则需要以下方法</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">id</span>) allocObject &#123;</div><div class="line">    <span class="comment">//自己生成并持有</span></div><div class="line">  <span class="keyword">id</span> obj = [[<span class="built_in">NSObject</span> alloc] init];</div><div class="line">  <span class="comment">//自己持有对象</span></div><div class="line">  <span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">	原封不动的返回alloc方法生成并持有的对象，就能让调用方也持有该对象。</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//取得非自己生成并持有的对象</span></div><div class="line"></div><div class="line"><span class="keyword">id</span> obj1 =[obj0 allocObject];</div><div class="line"></div><div class="line"><span class="comment">//自己持有对象</span></div></pre></td></tr></table></figure>
<p>注意，<code>allocObject</code>方法符合<code>以alloc/new/copy/mutableCopy方法开头</code>并用驼峰拼写法命名的命名规则。因此它与<code>alloc</code>方法生成并持有对象的情况完全相同。</p>
<p>若使取得的对象存在，但自己不持有对象，就需要这样</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">id</span>)Object&#123;</div><div class="line">    <span class="keyword">id</span> obj = [[<span class="built_in">NSObject</span> alloc] init];</div><div class="line">  <span class="comment">//自己持有对象</span></div><div class="line">  [obj autorelease];</div><div class="line">  <span class="comment">//取得对象存在，但不持有</span></div><div class="line">  <span class="keyword">return</span> obj;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上例中，我们使用了<code>autorelease</code>方法。用该方法，可以使取得的对象存在，但自己不持有对象。</p>
<p><code>autorelease</code>提供这样的功能，使对象在超出指定的生存范围时能够自动并正确地释放(调用<code>release</code>)。</p>
<p>使用<code>[NSmutableArray array]</code>方法取得谁都不持有的对象，就是通过<code>autorelease</code>实现的。</p>
<h2 id="无法释放非自己持有的对象"><a href="#无法释放非自己持有的对象" class="headerlink" title="无法释放非自己持有的对象"></a>无法释放非自己持有的对象</h2><p>对于用<code>alloc/new/copy/mutableCopy</code>方法生成并持有的对象，或是用<code>retain</code>方法持有的对象，由于持有者是自己，所以在不需要该对象时需要将其释放。</p>
<p>而由此以外所得到的对象绝对不能释放。倘若在应用程序中释放了非自己持有的对象就会造成崩溃。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**释放完不再需要的对象后再次释放**/</span></div><div class="line"></div><div class="line"><span class="comment">//自己生成并持有对象</span></div><div class="line"><span class="keyword">id</span> obj =[[<span class="built_in">NSObject</span> alloc] init];</div><div class="line"><span class="comment">//自己持有对象</span></div><div class="line">[obj release];</div><div class="line"><span class="comment">//对象已释放</span></div><div class="line">[obj release];</div><div class="line"><span class="comment">//程序崩溃</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**取得对象存在，但自己不持有时释放**/</span></div><div class="line"><span class="keyword">id</span> obj1 = [obj0 object];</div><div class="line"><span class="comment">//取得的对象存在，但自己不持有对象</span></div><div class="line">[obj1 release];</div><div class="line"><span class="comment">//程序崩溃</span></div></pre></td></tr></table></figure>
<p>如以上例子，释放非自己持有的对象会造成程序崩溃，因此绝对不要去释放非自己持有的对象。</p>
<h1 id="所有权修饰符"><a href="#所有权修饰符" class="headerlink" title="所有权修饰符"></a>所有权修饰符</h1><p>Objc为了处理对象，可将变量类型定义为id类型或各种对象类型。</p>
<p>所谓对象类型就是指向NSObject这样的Objective-C类的指针，例如”NSObject <em>“。id类型用于隐藏对象类型的类名部分，相当于C语言中常用的”void </em>“</p>
<p>ARC有效时，id类型和对象类型同C语言其他类型不同，其类型上必须附有<strong>所有权修饰符</strong>。</p>
<p><strong>所有权修饰符</strong>一共有4种：</p>
<ul>
<li>__strong 修饰符</li>
<li>__weak 修饰符</li>
<li>__ unsafe_unretained 修饰符</li>
<li>__autoreleasing修饰符</li>
</ul>
<h3 id="strong-修饰符"><a href="#strong-修饰符" class="headerlink" title="__strong 修饰符"></a>__strong 修饰符</h3><p>__strong修饰符是id类型和对象类型默认的所有权修饰符。也就是说以下源代码中的id变量，实际上被附加了所有权修饰符</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">id</span> obj = [[<span class="built_in">NSObject</span> alloc]init];</div><div class="line"><span class="comment">//等价于</span></div><div class="line"><span class="keyword">id</span> __<span class="keyword">strong</span> obj = [[<span class="built_in">NSObject</span> alloc] init];</div></pre></td></tr></table></figure>
<p>ARC无效时，则这样表述</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">id</span> obj = [[<span class="built_in">NSObject</span> alloc] init];</div></pre></td></tr></table></figure>
<p>这段代码表面上无任何变化，再看一下下面的代码</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="keyword">id</span> __<span class="keyword">strong</span> obj = [[<span class="built_in">NSObject</span> alloc] init];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此源代码制定了C语言的变量的作用域。ARC无效时，该源码可记为：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ARC无效</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">id</span> obj = [[<span class="built_in">NSObject</span> alloc] init];</div><div class="line">  [obj release];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了释放生成并持有的对象，增加调用release方法的代码。该源码进行的动作同先前ARC有效时的动作完全一样。</p>
<p>如此源码所示，附有__strong修饰符的变量obj在超出其变量作用域时，即在该变量被废弃时，会释放其被赋予的对象。</p>
<p>__strong修饰符表示对对象的”强引用”。持有强引用的变量在超出其作用域时被废弃，随着强引用的失效，引用的对象会随之释放。</p>
<p>上文中的代码是自己生成自己持有的情况，那么在取得非自己生成并持有的对象时又会如何？</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="comment">//取的非自己生成并持有的对象</span></div><div class="line">    <span class="keyword">id</span> __<span class="keyword">strong</span> obj = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">	<span class="comment">//变量obj为强引用，所以自己持有</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//超出作用域，强引用失效</span></div><div class="line"><span class="comment">//自动释放自己持有的对象</span></div></pre></td></tr></table></figure>
<p>__strong修饰的变量，不仅只在变量作用域中，在赋值上也能正确管理其对象的所有者。</p>
<p>另外，__strong修饰符同后面要说到的__weak修饰符和__autoreleasing修饰符一起，可以保证将附有这些修饰符的自动变量初始化为nil。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">id</span> __<span class="keyword">strong</span> obj0;</div><div class="line"><span class="keyword">id</span> __<span class="keyword">weak</span> obj1;</div><div class="line"><span class="keyword">id</span> __autoreleasing obj2;</div><div class="line"><span class="comment">//等价于</span></div><div class="line"><span class="keyword">id</span> __<span class="keyword">strong</span> obj0 = <span class="literal">nil</span>;</div><div class="line"><span class="keyword">id</span> __<span class="keyword">weak</span> obj1 = <span class="literal">nil</span>;</div><div class="line"><span class="keyword">id</span> __autoreleasing obj2 = <span class="literal">nil</span>;</div></pre></td></tr></table></figure>
<h3 id="weak修饰符"><a href="#weak修饰符" class="headerlink" title="__weak修饰符"></a>__weak修饰符</h3><p>看起来好像通过__strong修饰符，编译器就可以完美进行内存管理，但是事实却并非如此。</p>
<p>使用引用计数式内存管理中必然会发生“循环引用”问题，而光靠__strong是无法解决这一重大问题的。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Test</span> : <span class="title">NSObject</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">id</span> __<span class="keyword">strong</span> obj_;</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)setObject:(<span class="keyword">id</span> __<span class="keyword">strong</span>)obj;</div><div class="line"><span class="keyword">@end</span></div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Test</span></span></div><div class="line">- (<span class="keyword">id</span>)init&#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">  <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)setObject:(<span class="keyword">id</span> __<span class="keyword">strong</span>)obj</div><div class="line">&#123;</div><div class="line">    obj_  = obj;</div><div class="line">&#125;</div><div class="line"><span class="comment">//以下为循环引用</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">id</span> test0 = [[Test alloc] init];<span class="comment">/*对象A*/</span></div><div class="line"><span class="comment">//test0持有Test对象A的强引用</span></div><div class="line"><span class="keyword">id</span> test1 = [[Test alloc] init];<span class="comment">/*对象B*/</span></div><div class="line"><span class="comment">//test1持有Test对象B的强引用</span></div><div class="line">[test0 setObject:test1];</div><div class="line"><span class="comment">//Test对象A的obj_成员变量持有Test对象B的强引用。</span></div><div class="line"></div><div class="line"><span class="comment">//此时持有Test对象B的强引用的变量为</span></div><div class="line"><span class="comment">//Test对象A的obj_和test1。</span></div><div class="line">[test1 setObject:test0];</div><div class="line"><span class="comment">//Test对象B的obj_成员变量持有Test对象A的强引用。</span></div><div class="line"></div><div class="line"><span class="comment">//此时，持有Test对象A的强引用变量为</span></div><div class="line"><span class="comment">//Test对象B的obj_和test0。</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//因为test0变量超出作用域，强引用失效</span></div><div class="line"><span class="comment">//自动释放Test对象A</span></div><div class="line"><span class="comment">//因为test1变量超出作用域，强引用失效</span></div><div class="line"><span class="comment">//自动释放Test对象B</span></div><div class="line"></div><div class="line"><span class="comment">//此时，持有Test对象A的强引用变量为Test对象B的obj_</span></div><div class="line"><span class="comment">//持有Test对象B的强引用变量为Test对象A的obj_</span></div><div class="line"></div><div class="line"><span class="comment">//内存泄漏!!</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//以下是对自身强引用导致的循环引用</span></div><div class="line"><span class="keyword">id</span> test = [[Test alloc] init];</div><div class="line">[test setObject:test];</div></pre></td></tr></table></figure>
<p>这个时候就需要_<em>weak修饰符出场了。\</em>_weak修饰符和__strong相反，提供弱引用。弱引用不能持有对象实例。</p>
<p>首先需要声明的是，__weak不能用来直接声明变量</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">id</span> __<span class="keyword">weak</span> obj = [[<span class="built_in">NSObject</span> alloc] init];</div><div class="line"><span class="comment">//会提示以下错误</span></div><div class="line">warning: assigning retained obj to <span class="keyword">weak</span> variable; obj will be       released after assignment [-Warc-unsafe-retained-<span class="keyword">assign</span>]</div><div class="line">  <span class="keyword">id</span> __<span class="keyword">weak</span> obj = [[<span class="built_in">NSObject</span> alloc] init];</div><div class="line">            ^     ~~~~~~~~~~~~~~~~~~~~~~~</div></pre></td></tr></table></figure>
<p>以上代码会导致生成的对象立即释放(因为弱引用并不持有对象)。如果像以下这种情况的话，就没有警告了</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">id</span> __<span class="keyword">strong</span> obj0 = [[<span class="built_in">NSObject</span> alloc ] init];</div><div class="line"><span class="keyword">id</span> __<span class="keyword">weak</span> obj1 = obj0;</div><div class="line"><span class="comment">//解决上一例子中循环引用问题</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Test</span> : <span class="title">NSObject</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">id</span> __<span class="keyword">weak</span> obj_;</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)setObject:(<span class="keyword">id</span> __<span class="keyword">strong</span>)obj;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>__weak修饰符还有一个优点——在持有某对象的弱引用时，若该对象被废弃，则弱引用自动失效且置为nil：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">id</span> __<span class="keyword">weak</span> obj1 = <span class="literal">nil</span>;</div><div class="line">&#123;</div><div class="line">    <span class="keyword">id</span> __<span class="keyword">strong</span> obj0 = [[<span class="built_in">NSObject</span> alloc] init];</div><div class="line">  obj1 = obj0;</div><div class="line">  <span class="built_in">NSLog</span>(<span class="string">@"A:%@"</span>,obj1);</div><div class="line">&#125;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"B:%@"</span>,obj1);</div><div class="line"><span class="comment">//结果如下</span></div><div class="line">A: &lt;<span class="built_in">NSObject</span>: <span class="number">0x753e180</span>&gt;</div><div class="line">B: (null)</div></pre></td></tr></table></figure>
<p>像这样，使用_<em>weak修饰符可避免循环引用。通过检查有\</em>_weak修饰符修饰的变量是否为nil，可判断被赋值对象是否被废弃。</p>
<p>_<em>weak修饰符只能用于iOS5以上以及OS X Lion以上版本的应用程序。在之前的版本可用\</em>_unsafe_unretained修饰符来代替。</p>
<h3 id="unsafe-unretained修饰符"><a href="#unsafe-unretained修饰符" class="headerlink" title="__unsafe_unretained修饰符"></a>__unsafe_unretained修饰符</h3><p>__unsafe_unretained修饰符是不安全的所有权修饰符。它不属于编译器的内的存管理对象。</p>
<p>它也与__weak一样，不能直接生成变量，但是它也有不同的地方</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">id</span> __<span class="keyword">unsafe_unretained</span> obj1 = <span class="literal">nil</span>;</div><div class="line">&#123;  <span class="comment">//自己生成并持有对象</span></div><div class="line">    <span class="keyword">id</span> __<span class="keyword">strong</span> obj0 = [[<span class="built_in">NSObject</span> alloc] init];</div><div class="line">  <span class="comment">//obj0变量为强引用，所以自己持有对象</span></div><div class="line">  obj1 = obj0;</div><div class="line">  <span class="comment">//虽然obj0变量赋值给obj1</span></div><div class="line">  <span class="comment">//但是obj1变量既不持有对象的强引用也不持有弱引用</span></div><div class="line">  <span class="built_in">NSLog</span>(<span class="string">@"A: %@"</span>,obj1);</div><div class="line">  <span class="comment">//输出obj1变量表示的对象</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//obj0超出作用域，强引用失效</span></div><div class="line"><span class="comment">//自动释放自己持有的对象</span></div><div class="line"><span class="comment">//对象无持有者，废弃</span></div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"B: %@"</span>,obj1);</div><div class="line"><span class="comment">//结果为</span></div><div class="line">A: &lt;<span class="built_in">NSObject</span>: <span class="number">0x753e180</span>&gt;</div><div class="line">B: &lt;<span class="built_in">NSObject</span>: <span class="number">0x753e180</span>&gt;</div><div class="line"><span class="comment">//输出obj1变量表示的对象</span></div><div class="line">  <span class="comment">//obj1变量表示的对象</span></div><div class="line">  <span class="comment">//已经被废弃(悬垂指针)</span></div><div class="line">  <span class="comment">//错误访问</span></div></pre></td></tr></table></figure>
<p>也就是说，最后一行NSLog只是碰巧运行而已，虽然访问了已经被废弃的对象，但是应用程序在个别运行情况下才会崩溃。我想这也是它为什么不成为不安全(unsafe)的修饰符的原因了吧。</p>
<p>在使用__unsafe<em>unretained修饰符时，赋值给附有\</em>_strong修饰符的变量时有必要确保被赋值对象确实存在。</p>
<h3 id="autoreleasing修饰符"><a href="#autoreleasing修饰符" class="headerlink" title="__autoreleasing修饰符"></a>__autoreleasing修饰符</h3><p>ARC有效时不能使用autorelease方法，也不能使用NSAutoreleasePool类。</p>
<p>那么我们用autoreleas的方法就有所不同</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ARC无效</span></div><div class="line"><span class="built_in">NSAutoreleasePool</span> *pool = [[<span class="built_in">NSAutoreleasePool</span> alloc] init];</div><div class="line"><span class="keyword">id</span> obj = [<span class="built_in">NSObject</span> alloc] init];</div><div class="line">[obj autorelease];</div><div class="line">[pool drain];</div><div class="line"><span class="comment">//ARC有效</span></div><div class="line"><span class="keyword">@autoreleasepool</span>&#123;</div><div class="line">    <span class="keyword">id</span> __autoreleasing obj = [[<span class="built_in">NSObject</span> alloc] init];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从以上代码可以看出，我们用<code>@autorelease</code>块来替代<code>NSAutoreleasePool</code>类对象生成、持有以及放弃这一范围。</p>
<p>另外ARC有效时，要通过将对象赋值给附加了__autoreleasing修饰符的变量来替代调用autorelease方法。即对象被注册到autoreleasepool。</p>
<p> 在取得非自己生成并持有的对象时，</p>
<p>虽然可以用alloc/new/copy/mutableCopy以外的方法来获得对象，但该对象已被注册到了autoreleasepool。由于编译器会检查方法是否以alloc/new/copy/mutableCopy开始，如果不是则自动将返回值注册到autoreleasepool。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">id</span>) array&#123;</div><div class="line">    <span class="keyword">id</span> obj = [[<span class="built_in">NSMutableArray</span> alloc] init];</div><div class="line">  <span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line"><span class="comment">//因为return使对象变量超出其作用域，所以该强引用持有的对象会被自动释放。</span></div><div class="line"><span class="comment">//作为返回值，编译器会自动将该对象注册到autoreleasepool</span></div></pre></td></tr></table></figure>
<p>以下为使用_<em>weak修饰符的例子，虽然\</em>_weak修饰符是为了避免循环引用而使用的，但在访问附有__weak修饰符的变量时，实际上必定要访问注册到autoreleasepool的对象。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">id</span> __<span class="keyword">weak</span> obj1 = obj0;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"class = %@"</span>,[obj <span class="keyword">class</span>]);</div><div class="line"><span class="comment">//等价于</span></div><div class="line"><span class="keyword">id</span> __<span class="keyword">weak</span> obj1 = obj0;</div><div class="line"><span class="keyword">id</span> __autoreleasing tmp = obj1;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"class = %@"</span>,[tmp <span class="keyword">class</span>]);</div></pre></td></tr></table></figure>
<p>因为__weak修饰符支持有对象的弱引用，在访问引用对象的过程中，该对象有可能被废弃。把它注册到autoreleasepool中后，在@autoreleasepool块结束之前都能确保该对象存在。</p>
<p>这里要特别说明的是，id的指针或者对象的指针在没有显示指定时会被附上__autoreleasing修饰符。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;众所周知，Apple从OS X Lion和iOS 5引入了新的内存管理功能——自动引用计数(ARC)功能。这些功能对于我们开发者说也是需要去了解的一个重要知识点。&lt;/p&gt;
&lt;p&gt;​
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="ARC" scheme="http://yoursite.com/tags/ARC/"/>
    
  </entry>
  
  <entry>
    <title>Objc 的消息发送机制与 Runtime</title>
    <link href="http://yoursite.com/2017/09/02/AboutRuntime/"/>
    <id>http://yoursite.com/2017/09/02/AboutRuntime/</id>
    <published>2017-09-02T04:19:55.000Z</published>
    <updated>2019-11-10T07:00:43.234Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>曾觉得 iOS 很好学，也想着学一段时间就可以精通这门语言，但是随着开发的越来越深入，才能意识到，iOS 绝不像外表这样简单，他的内涵真是太深了，感觉自己真是一个什么也不知道的 Objc 小白。</p>
<p>Runtime 和消息发送机制是理解 iOS 运行过程避不开的一道坎，虽然平时很少用，但是却是我们 Objc 程序员需要了解的。</p>
<p>​    <a id="more"></a></p>
<h1 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h1><hr>
<p>因为Objc是一门动态语言，所以它总会在运行时（而不是编译时）进行工作。所以光有一个编译器是不够的，还需要一个运行时系统（runtime system）执行编译后代码。这便是Runtime系统，它是整个Objc运行框架的基石。</p>
<h2 id="Objc与Runtime的交互"><a href="#Objc与Runtime的交互" class="headerlink" title="Objc与Runtime的交互"></a>Objc与Runtime的交互</h2><hr>
<p><strong>objc从三种不同的层级上与Runtime系统交互，分别是</strong>：</p>
<h3 id="Objective-C-源代码"><a href="#Objective-C-源代码" class="headerlink" title="Objective-C 源代码"></a>Objective-C 源代码</h3><p>部分情况下，runtime都是系统在幕后执行，我们只需要在前台好好写Objc代码就行。</p>
<p>消息执行会使用到一些编译器为实现动态语言特性而创建的数据结构和函数。</p>
<p><strong>Objc中的类、方法和协议等在runtime中都由一些数据结构定义</strong></p>
<h3 id="NSObject的方法"><a href="#NSObject的方法" class="headerlink" title="NSObject的方法"></a>NSObject的方法</h3><p>Cocoa中大多数类都继承于<code>NSObject</code>类，所以也就继承了它的方法（NSProxy除外）。</p>
<p>NSObject中有许多的方法，自然也有许多作用，比如</p>
<ul>
<li>抽象接口作用，比如<code>description</code>方法需要重载它并为你定义的类提供描述内容。</li>
<li>在运行时获得类的信息并检查一些特性，比如<ul>
<li><code>class</code>返回对象的类</li>
<li><code>isKindOfClass:</code>和<code>isMemberofClass:</code>则检查对象是否在指定的类继承体系中。</li>
<li><code>respondsToSelector:</code>检查对象能否响应指定消息（是否有指定方法）。</li>
<li><code>conformsToProtocol</code>检查对象是否实现了指定协议方法</li>
<li><code>methodForSelector:</code>返回指定方法实现的地址</li>
</ul>
</li>
</ul>
<h3 id="Runtime的函数"><a href="#Runtime的函数" class="headerlink" title="Runtime的函数"></a>Runtime的函数</h3><p>Runtime系统是一个有一系列函数和数据结构组成，具有公共接口的动态共享库。头文件在<code>/user/include/objc</code>中。在<a href="https://developer.apple.com/documentation/objectivec/objective_c_runtime" target="_blank" rel="external">Objective-C Runtime Reference</a>中有对Runtime函数的详细文档。</p>
<h2 id="Runtime基础数据结构"><a href="#Runtime基础数据结构" class="headerlink" title="Runtime基础数据结构"></a>Runtime基础数据结构</h2><hr>
<p>在一个类似[a someFuc]的方法调用中，编译阶段编译器并不知道someFuc要实现哪一段代码而只是确定了要向接受者发送someFuc消息，只有到运行的时候，才会发送消息进行方法的确定。这里我们可以看一下objc的底层实现。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//main.m</span></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])&#123;</div><div class="line">    <span class="keyword">@autoreleasepool</span>&#123;</div><div class="line">        Person * p = [[Person alloc] init];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上函数在底层其实是这样的</p>
<p><img src="/img/objc_msgsend.jpg" alt="底层"></p>
<p>如上图所示，其实Objc所有方法在底层都会变成一个函数，那就是<code>objc_msgSend()</code>。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">id</span> objc_msgSend ( <span class="keyword">id</span> <span class="keyword">self</span>, SEL op, ...);</div></pre></td></tr></table></figure>
<p>这里面有两个参数值得注意，一个是<code>id</code>，一个是<code>SEL</code>，鉴于id比较复杂，我们先讲讲<code>SEL</code></p>
<h3 id="SEL"><a href="#SEL" class="headerlink" title="SEL"></a>SEL</h3><p>它是<code>selector</code>在Objc中的表示类型。<code>selector</code>是方法选择器，相当于区分各个方法的一个ID，这个ID的数据结构就是SEL</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_selector *SEL;</div></pre></td></tr></table></figure>
<p>我们可以用Objc编译器命令<code>@selector()</code>或Runtime的<code>sel_registerName</code>获得一个<code>SEL</code>类型的方法选择器。</p>
<h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><p>作为开发者，大家应该对id都不会陌生，它是一个指向类实例的指针</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_object *<span class="keyword">id</span>;</div></pre></td></tr></table></figure>
<p>在这之中，<code>objc_object</code>是这样的一个结构体</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//objc-private.h</span></div><div class="line"><span class="keyword">struct</span> objc_object &#123;</div><div class="line">private:</div><div class="line">    isa_t isa;</div><div class="line"></div><div class="line">public:</div><div class="line"></div><div class="line">    <span class="comment">// ISA() assumes this is NOT a tagged pointer object</span></div><div class="line">    Class ISA();</div><div class="line"></div><div class="line">    <span class="comment">// getIsa() allows this to be a tagged pointer object</span></div><div class="line">    Class getIsa();</div><div class="line">    ... 此处省略其他方法声明</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结构体重包含一个<code>isa</code>指针，类型为<code>isa_t</code>根据<code>isa</code>就可以找到对象所属的类。</p>
<p><code>isa</code>指针又涉及到引用计数原理的知识了，这里就不做详尽描述了。</p>
<p>objc_object中又有属性值得我们注意</p>
<h4 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h4><p><code>Class</code>其实是一个指向<code>objc_class</code>结构体的指针</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_class *Class;</div></pre></td></tr></table></figure>
<p>这个<code>objc_class</code>又包含很多方法了</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> objc_class : objc_object &#123;</div><div class="line">    <span class="comment">// Class ISA;</span></div><div class="line">    Class superclass;</div><div class="line">    cache_t cache;             <span class="comment">// formerly cache pointer and vtable</span></div><div class="line">    class_data_bits_t bits;    <span class="comment">// class_rw_t * plus custom rr/alloc flags</span></div><div class="line">    class_rw_t *data() &#123; </div><div class="line">        <span class="keyword">return</span> bits.data();</div><div class="line">    &#125;</div><div class="line">    ... 省略其他方法</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以看到<code>objc_class</code>继承于<code>objc_object</code>，所以我们可以说一个Objc类本来就是一个对象。</p>
<p>为了处理类和对象的关系，runtime创建了一种叫<strong>元类（Meta Class）</strong>的东西，<strong>类对象所属类型就叫元类</strong>，它用来表述类对象本身所具备的元数据。这就是类方法的定义，每个类仅有一个类对象，每个类也只有一个与之相关的元类。</p>
<p>当我们使用类似<code>[p alloc]</code>的类方法时，事实上是把这个消息发送给了一个类对象，这个类对象必须是一个元类的实例，而这个元类也是一个<strong>根元类(root meta class)</strong>的实例。所有元类都指向根元类为其超类。所有元类的方法列表都有能够响应消息的类方法。</p>
<p>所以当<code>[p alloc]</code>这条消息发给类对象的时候，<code>objc_msgSend()</code>会去它的元类里面去查找能够响应消息的方法，如果找到了，然后就对这个类对象执行方法调用。</p>
<p><img src="/img/超类关系图.png" alt="关系图"></p>
<p>根据上图，我们可以看到方法，类，元类的关系。有趣的是<strong>根元类</strong>的超类是<strong>根类</strong>（根类在实际运用中就是<code>NSObject</code>），<code>isa</code>指向了自己。</p>
<p>而<code>NSObject</code>的超类为<code>nil</code>，也就是说它没有超类。</p>
<p>可以看到运行时一个类还关联了它的超类指针(superclass)，类名，成员变量，方法，缓存，还有附属协议。</p>
<h5 id="cache-t"><a href="#cache-t" class="headerlink" title="cache_t"></a>cache_t</h5><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> cache_t &#123;</div><div class="line">    <span class="keyword">struct</span> bucket_t *_buckets;</div><div class="line">    mask_t _mask;</div><div class="line">    mask_t _occupied;</div><div class="line">    ... 省略其他方法</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>_buckets</code>存储<code>IMP</code>。<code>_mask</code>和<code>_occupied</code>对应<code>vtable</code>。</p>
<p><code>cache</code>是优化的一个机制，如果我们实例对象每收到一个消息都去<code>isa</code>指向的类方法列表中遍历，那效率就太低了。</p>
<p>所以系统会把调用的方法存到<code>cache</code>中，然后在收到消息后优先在<code>cache</code>中查找（理论上讲 如果一个方法被调用一次，那它就很有可能在今后还会被调用）。</p>
<p><code>bucket_t</code>中存储了指针与IMP的键值对：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> bucket_t &#123;</div><div class="line">private:</div><div class="line">    cache_key_t _key;</div><div class="line">    IMP _imp;</div><div class="line"></div><div class="line">public:</div><div class="line">    <span class="keyword">inline</span> cache_key_t key() <span class="keyword">const</span> &#123; <span class="keyword">return</span> _key; &#125;</div><div class="line">    <span class="keyword">inline</span> IMP imp() <span class="keyword">const</span> &#123; <span class="keyword">return</span> (IMP)_imp; &#125;</div><div class="line">    <span class="keyword">inline</span> <span class="keyword">void</span> setKey(cache_key_t newKey) &#123; _key = newKey; &#125;</div><div class="line">    <span class="keyword">inline</span> <span class="keyword">void</span> setImp(IMP newImp) &#123; _imp = newImp; &#125;</div><div class="line"></div><div class="line">    <span class="keyword">void</span> set(cache_key_t newKey, IMP newImp);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>详细的细节都在<code>objc-cache.mm</code>文件中</p>
<h5 id="class-data-bits-t"><a href="#class-data-bits-t" class="headerlink" title="class_data_bits_t"></a>class_data_bits_t</h5><p><code>class_data_bits_t</code>包含的信息太多了，主要有<code>class_rw_t</code>,<code>retain/release/autorelease/retaincount</code>和<code>alloc</code>等信息。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//objc-runtime-new.h</span></div><div class="line"><span class="keyword">struct</span> class_data_bits_t &#123;</div><div class="line"></div><div class="line">	<span class="comment">// Values are the FAST_ flags above.</span></div><div class="line">	uintptr_t bits;</div><div class="line">	class_rw_t* data() &#123;</div><div class="line">	   <span class="keyword">return</span> (class_rw_t *)(bits &amp; FAST_DATA_MASK);</div><div class="line">	&#125;</div><div class="line">... 省略其他方法</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>联系前面的<code>Class</code>，我们可以注意到<code>objc_class</code>的<code>data</code>方法返回的是<code>class_data_bits_t</code>的<code>data</code>方法，最终返回的是<code>class_rw_t</code>，有好几层。</p>
<p>在<code>class_data_bits_t</code>里又包含了一个<code>bits</code>，这个指针跟不同的<code>FAST_</code>前缀的掩码做按位与操作，可获得不同的数据。<code>bits</code>在内存中每个位的含义有三种排列顺序：</p>
<p><img src="/img/class_data_bits_t.png" alt="class_data_bits_t"></p>
<p>64位不兼容中每个宏对应含义如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// class is a Swift class</span></div><div class="line"><span class="meta">#define FAST_IS_SWIFT           (1UL<span class="meta-string">&lt;&lt;0)</span></span></div><div class="line"><span class="meta"><span class="meta-string">// class's instances requires raw isa</span></span></div><div class="line"><span class="meta"><span class="meta-string">#define FAST_REQUIRES_RAW_ISA   (1UL&lt;&lt;1)</span></span></div><div class="line"><span class="meta"><span class="meta-string">// class or superclass has .cxx_destruct implementation</span></span></div><div class="line"><span class="meta"><span class="meta-string">//   This bit is aligned with isa_t-&gt;</span>hasCxxDtor to save an instruction.</span></div><div class="line"><span class="meta">#define FAST_HAS_CXX_DTOR       (1UL<span class="meta-string">&lt;&lt;2)</span></span></div><div class="line"><span class="meta"><span class="meta-string">// data pointer</span></span></div><div class="line"><span class="meta"><span class="meta-string">#define FAST_DATA_MASK          0x00007ffffffffff8UL</span></span></div><div class="line"><span class="meta"><span class="meta-string">// class or superclass has .cxx_construct implementation</span></span></div><div class="line"><span class="meta"><span class="meta-string">#define FAST_HAS_CXX_CTOR       (1UL&lt;&lt;47)</span></span></div><div class="line"><span class="meta"><span class="meta-string">// class or superclass has default alloc/allocWithZone: implementation</span></span></div><div class="line"><span class="meta"><span class="meta-string">// Note this is is stored in the metaclass.</span></span></div><div class="line"><span class="meta"><span class="meta-string">#define FAST_HAS_DEFAULT_AWZ    (1UL&lt;&lt;48)</span></span></div><div class="line"><span class="meta"><span class="meta-string">// class or superclass has default retain/release/autorelease/retainCount/</span></span></div><div class="line"><span class="meta"><span class="meta-string">//   _tryRetain/_isDeallocating/retainWeakReference/allowsWeakReference</span></span></div><div class="line"><span class="meta"><span class="meta-string">#define FAST_HAS_DEFAULT_RR     (1UL&lt;&lt;49)</span></span></div><div class="line"><span class="meta"><span class="meta-string">// summary bit for fast alloc path: !hasCxxCtor and </span></span></div><div class="line"><span class="meta"><span class="meta-string">//   !instancesRequireRawIsa and instanceSize fits into shiftedSize</span></span></div><div class="line"><span class="meta"><span class="meta-string">#define FAST_ALLOC              (1UL&lt;&lt;50)</span></span></div><div class="line"><span class="meta"><span class="meta-string">// instance size in units of 16 bytes</span></span></div><div class="line"><span class="meta"><span class="meta-string">//   or 0 if the instance size is too big in this field</span></span></div><div class="line"><span class="meta"><span class="meta-string">//   This field must be LAST</span></span></div><div class="line"><span class="meta"><span class="meta-string">#define FAST_SHIFTED_SIZE_SHIFT 51</span></span></div></pre></td></tr></table></figure>
<p>在这里除了<code>FAST_DATA_MASK</code>是用一段空间储存数据外，其他宏都是用1bit存bool值。</p>
<p><code>class_data_bits_t</code>提供了三个方法用于位操作：<code>getBit</code>,<code>setBits</code>和<code>clearBits</code></p>
<p>而<code>FAST_DATA_MASK</code>的存储区域里面其实就是存储了指向<code>class_rw_t</code>的指针</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">class_rw_t* data() &#123;</div><div class="line">   <span class="keyword">return</span> (class_rw_t *)(bits &amp; FAST_DATA_MASK);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Category"><a href="#Category" class="headerlink" title="Category"></a>Category</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> category_t *Category;</div></pre></td></tr></table></figure>
<p><code>Category</code>为现有的类提供了拓展，存储了类别中可以拓展的实例方法、实例属性和类方法、类属性(objc2016新增特性)。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> category_t &#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;</div><div class="line">    classref_t cls;</div><div class="line">    <span class="keyword">struct</span> method_list_t *instanceMethods;</div><div class="line">    <span class="keyword">struct</span> method_list_t *classMethods;</div><div class="line">    <span class="keyword">struct</span> protocol_list_t *protocols;</div><div class="line">    <span class="keyword">struct</span> property_list_t *instanceProperties;</div><div class="line">    <span class="comment">// Fields below this point are not always present on disk.</span></div><div class="line">    <span class="keyword">struct</span> property_list_t *_classProperties;</div><div class="line"></div><div class="line">    method_list_t *methodsForMeta(<span class="keyword">bool</span> isMeta) &#123;</div><div class="line">        <span class="keyword">if</span> (isMeta) <span class="keyword">return</span> classMethods;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> instanceMethods;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    property_list_t *propertiesForMeta(<span class="keyword">bool</span> isMeta, <span class="keyword">struct</span> header_info *hi);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>App 启动加载镜像文件的时候，会简介调用到<code>attachCategories</code>函数，完成向类中添加<code>Category</code>的工作。</p>
<h4 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> method_t *Method;</div></pre></td></tr></table></figure>
<p>它存储了方法名，方法类型和方法实现：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> method_t &#123;</div><div class="line">    SEL name;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *types;</div><div class="line">    IMP imp;</div><div class="line"></div><div class="line">    <span class="keyword">struct</span> SortBySELAddress :</div><div class="line">        public std::binary_function&lt;<span class="keyword">const</span> method_t&amp;,</div><div class="line">                                    <span class="keyword">const</span> method_t&amp;, <span class="keyword">bool</span>&gt;</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">bool</span> operator() (<span class="keyword">const</span> method_t&amp; lhs,</div><div class="line">                         <span class="keyword">const</span> method_t&amp; rhs)</div><div class="line">        &#123; <span class="keyword">return</span> lhs.name &lt; rhs.name; &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>方法名类型为<code>SEL</code>，方法类型<code>types</code>是个<code>char</code>指针，存储着方法的参数类型和返回值类型。</p>
<p><code>imp</code>指向了方法实现，其实是一个函数指针。</p>
<h4 id="Ivar"><a href="#Ivar" class="headerlink" title="Ivar"></a>Ivar</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> ivar_t *Ivar;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">struct</span> ivar_t &#123;</div><div class="line">    int32_t *offset;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *type;</div><div class="line">    <span class="comment">// alignment is sometimes -1; use alignment() instead</span></div><div class="line">    uint32_t alignment_raw;</div><div class="line">    uint32_t size;</div><div class="line"></div><div class="line">    uint32_t alignment() <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">if</span> (alignment_raw == ~(uint32_t)<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>U &lt;&lt; WORD_SHIFT;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span> &lt;&lt; alignment_raw;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="IMP"><a href="#IMP" class="headerlink" title="IMP"></a>IMP</h4><p><code>IMP</code>在<code>objc.h</code>中为：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> (*IMP)(<span class="keyword">void</span> <span class="comment">/* id, SEL, ... */</span>);</div></pre></td></tr></table></figure>
<p>它就是一个函数指针，由编译器生成。当我们发起一个Objc消息后，最终会执行什么代码，就由这个指针指定。<code>IMP</code>这个函数指针指向了方法的实现。</p>
<h1 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h1><p>iOS Runtime真是博大精深，这还没走到最深层，就由一大堆底层概念，所以 学习之路漫漫啊。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/" target="_blank" rel="external">杨萧玉的博客</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;曾觉得 iOS 很好学，也想着学一段时间就可以精通这门语言，但是随着开发的越来越深入，才能意识到，iOS 绝不像外表这样简单，他的内涵真是太深了，感觉自己真是一个什么也不知道的 Objc 小白。&lt;/p&gt;
&lt;p&gt;Runtime 和消息发送机制是理解 iOS 运行过程避不开的一道坎，虽然平时很少用，但是却是我们 Objc 程序员需要了解的。&lt;/p&gt;
&lt;p&gt;​
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="runtime" scheme="http://yoursite.com/tags/runtime/"/>
    
  </entry>
  
  <entry>
    <title>关于读书</title>
    <link href="http://yoursite.com/2017/08/24/Reading/"/>
    <id>http://yoursite.com/2017/08/24/Reading/</id>
    <published>2017-08-23T16:39:37.000Z</published>
    <updated>2019-11-10T07:00:43.242Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>　　好久没看书了，一到放假，看书的效率就从一个月两三本，变成了一个月一本。有点惭愧。</p>
<p>​    <a id="more"></a></p>

        <div id="aplayer-whCdDPyr" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-whCdDPyr"),
            narrow: false,
            autoplay: true,
            showlrc: false,
            music: {
              title: "因为爱情",
              author: "王菲&陈奕迅",
              url: "http://www.ytmp3.cn/down/38989.mp3",
              pic: "http://p1.music.126.net/GGYQjJ-zDEivv9l6QgJUFg==/109951163020567917.jpg",
              lrc: ""
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>
<p>　　作为韩寒的书迷，自从在我看那本从哥哥那儿借来看的新概念作文大赛开始，稚嫩的自己就喜欢上他成熟的笔风，反复读了他的很多短篇小文随笔，却一直没有看过他的第一本书《三重门》</p>
<p>　　于是乎就特意去书店买来一本，打算暑假慢慢品味。</p>
<p>　　读完后其实感觉韩寒《三重门》的文笔还是比我想象的生涩，在我看来甚至还不如他当年的《杯中窥人》，虽有对很多事情的批判，但感觉又什么都没有，如今我们看到的韩寒式幽默在当时还是没有完全展现，尤其是那个仓促的结尾和后记的那句<code>我是金子，我要闪光的</code>无不显示出他的年少轻狂。</p>
<p>　　不过当年的韩寒也不过高三，也只比现在的我小两岁，能有如此想法已属不易。</p>
<p>　　书中的林雨翔太像年少的我们了，因一点微小的成就自诩神童，身边有一位看似冷漠实则喜欢与你比较的朋友，有终日想尽办法帮助自己学业问题的父母，有一心喜爱却无法修成正果的女孩Susan，还有一个喜欢自己，自己也喜欢的老师。而正是因为太像了，所以我们才能明白这样的我们其实只是一个普通人，普通到需要父母耗尽人脉操尽心帮助自己，普通到无法与喜欢的女孩修成正果，普通到被应试教育打造成“全能人才”。</p>
<p>　　正巧不巧在前几天读完了钱钟书先生的《围城》，惊觉韩寒的《三重门》正是钱先生《围城》的翻版。钱先生文中的那个“归国留学回来的大学生“方鸿渐不正是韩寒文中的那个林雨翔，那个”空有一身才能的没用的人“吗？</p>
<p>　　不过钱先生终究是钱先生，《围城》中对于人物的关系的描写，对人物的刻画，都比《三重门》高出许多，书中所批判的社会现状，可以说至今都存留于世。书中方鸿渐对鲍小姐、苏小姐、唐小姐、孙小姐的感情刻画可谓惟妙惟肖，我们的一生又何其相似，从年少荷尔蒙冲动而爱上的鲍小姐，到拒绝已不爱之人苏小姐，再到无法得到的挚爱唐小姐，最后再与看似平凡的孙小姐结婚，起落间不都是我们的一生吗。好比张爱玲的本红玫瑰与白玫瑰里的那白月光和朱砂痣。正因为得不到，唐小姐和Susan才如此完美，正因为日夜相伴，孙小姐才如此引人烦恼。感情这件事，真是一座围城，里面的人想出来，而外面的人却想进去。钱先生真乃大家！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　好久没看书了，一到放假，看书的效率就从一个月两三本，变成了一个月一本。有点惭愧。&lt;/p&gt;
&lt;p&gt;​
    
    </summary>
    
    
      <category term="读书" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>Runloop与线程</title>
    <link href="http://yoursite.com/2017/08/23/%E5%85%B3%E4%BA%8ERunloop%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
    <id>http://yoursite.com/2017/08/23/关于Runloop与线程/</id>
    <published>2017-08-23T08:24:37.000Z</published>
    <updated>2019-11-10T07:00:43.260Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="RunLoop"><a href="#RunLoop" class="headerlink" title="RunLoop"></a>RunLoop</h2><p>​    RunLoop是每一个iOS程序员应该都听过的一个名字，翻译过来大概是叫运行循环，在iOS攻城狮们的开发初期，几乎见不到RunLoop的身影。</p>
<p>​        <a id="more"></a></p>
<p>​    但它其实无处不在，最简单的例子就是Objective-C中的main函数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">int main(int argc, char * argv[]) &#123;</div><div class="line">    @autoreleasepool &#123;</div><div class="line">        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在UIApplicationMain中，就含有一个Runloop，是系统启动时创建的Runloop。</p>
<p>它有这么几个作用：</p>
<ul>
<li>保证App程序不退出</li>
<li>监听用户行为事件</li>
<li>监听时钟事件</li>
<li>监听网络事件</li>
<li>渲染UI</li>
</ul>
<p>如果没有事件发生，Runloop则会进入休眠状态。</p>
<h2 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h2><p><strong>监听NSTimer</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">    NSTimer * timer = [NSTimer timerWithTimeInterval:1.0 target:self selector:@selector(updataTimer) userInfo:nil repeats:YES];</div><div class="line"></div><div class="line">    [[NSRunLoop currentRunLoop] addTimer:timer forMode:NSDefaultRunLoopMode];</div><div class="line"></div><div class="line">//相当于上面两句</div><div class="line">   [NSTimer scheduledTimerWithTimeInterval:1.0 target:self selector:@selector(updataTimer) userInfo:nil repeats:YES];</div></pre></td></tr></table></figure>
<p>上面的代码是创建一个Timer，再通知Runloop每隔1s执行一次updataTimer方法</p>
<p>代码看上去虽然没什么问题，但是我们可以发现一个现象：如果我们在当前的Controller中添加了UI控件，当我们做 UI事件（触摸，拖动）时，我们可以发现每隔一秒执行方法的Timer突然停止了，当我们做完这些操作时，Timer又恢复了。</p>
<p>这一现象的出现，就牵扯到Runloop的模式了，也就是<code>[[NSRunLoop currentRunLoop] addTimer:timer forMode:NSDefaultRunLoopMode];</code>中的Mode。</p>
<p>RunLoop有五种模式，分别是</p>
<ul>
<li>NSDefaultRunLoopMode：默认 Mode，主线程就是在这个 Mode 下运行(默认情况下运行)</li>
<li>UITrackingRunLoopMode：UI Mode，优先级最高，用于监听UI事件，当发生UI事件时，这个Mode的Runloop优先调用</li>
<li>NSRunLoopCommonModes：占位 Mode，其实不是一种真正的 Mode ，但在这一模式下，默认Mode和UI Mode都可以被调用（不会因UI操作卡住Timer操作）</li>
<li>UIInitializationRunLoopMode：在刚启动 App 时进入的第一个 Mode，启动完成后就不再使用。</li>
<li>GSEventReceiveRunLoopMode：接受系统事件的内部 Mode</li>
</ul>
<p>在五种模式中，作为开发者，最常用的其实也就前三种模式。</p>
<p>上面的几个方法中，我们的Runloop为<code>NSDefaultRunLoopMode</code>，在这种情况（默认模式）下，当发生UI事件时，系统会优先调用<code>UITrackingRunLoopMode</code>而不去管默认模式，所以才造成了Timer不执行的情况。</p>
<p>如果我们将<code>NSDefaultRunLoopMode</code>改为<code>NSRunLoopCommonModes</code>就可以解决问题。</p>
<p><strong>那么为什么苹果工程师要分UI模式和Default模式呢？</strong></p>
<p>其实很简单，有耗时操作的存在，当我们在Timer中执行耗时操作时（例如sleep等），如果用占位模式，那么当我们对UI进行操作时，就会回调Timer的方法，因为是耗时操作，就会将界面卡住。</p>
<p><strong>那么怎么既让我们在进行UI操作的时候执行回调，又不卡住界面呢？</strong></p>
<p>其实更简单，因为App中的线程不止主线程一个，在苹果漫长的开发中，苹果工程师将UI界面放在了主线程单线程执行，所以，只要我们把耗时操作放到子线程执行，就不会再出现卡住的情况了</p>
<h2 id="线程与RunLoop"><a href="#线程与RunLoop" class="headerlink" title="线程与RunLoop"></a>线程与RunLoop</h2><p>我们先创建一个自定义线程类，来重写它的-dealloc方法</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//LYC_Thread.h</span></div><div class="line">-(<span class="keyword">void</span>)dealloc&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"线程结束"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再进行线程创建</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ViewController.m</span></div><div class="line"><span class="meta">#import <span class="meta-string">"LYC_Thread.h"</span></span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) LYC_Thread *thread;        <span class="comment">/**&lt; 线程  */</span></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    </div><div class="line">    _thread = [[LYC_Thread alloc]initWithBlock:^&#123;</div><div class="line">            <span class="built_in">NSTimer</span> * timer = [<span class="built_in">NSTimer</span> timerWithTimeInterval:<span class="number">1.0</span> target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(updataTimer) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</div><div class="line">            [[<span class="built_in">NSRunLoop</span> currentRunLoop] addTimer:timer forMode:<span class="built_in">NSRunLoopCommonModes</span>];</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"线程执行"</span>);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    [_thread start];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)updataTimer &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"耗时操作"</span>);</div><div class="line">    [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">1.0</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"执行完毕"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>乍一看似乎没有问题，然而当我们运行时发现，操作台的打印效果是这样</p>
<p><img src="/img/Thread.png" alt="操作台"></p>
<p>通过几个方法，我们可以看到，<code>NSThread</code>并没有被释放，但是却并没有执行耗时操作，这是为什么呢？</p>
<p>这是因为这个<code>NSThread</code>只是一个对象，而不是线程的本身。</p>
<p>线程是CPU去调用的，CPU负责在线程池里拿出一条线程去执行<code>NSThread</code>的任务，一旦结束，线程便没有了。</p>
<p>所以我们要让线程长期存在，并不是去强引用<code>NSThread</code>，而是让NSThread有执行不完的任务，这样，线程才会一直存在。</p>
<p>于是我们加入一个死循环在thread中并取消对<code>LYC_Thread</code>的强引用</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ViewController.m</span></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">        </div><div class="line">    LYC_Thread *thread = [[LYC_Thread alloc]initWithBlock:^&#123;</div><div class="line">            <span class="built_in">NSTimer</span> * timer = [<span class="built_in">NSTimer</span> timerWithTimeInterval:<span class="number">1.0</span> target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(updataTimer) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</div><div class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">            </div><div class="line">        &#125;;</div><div class="line">            [[<span class="built_in">NSRunLoop</span> currentRunLoop] addTimer:timer forMode:<span class="built_in">NSRunLoopCommonModes</span>];</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"线程执行"</span>);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    [thread start];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时控制台什么也没有打印，也就是说NSThread并没有被释放，也证明了线程并没有被回收</p>
<p>但是，我们加入死循环时，是没有加入事件的。那如果我们在加入死循环时还想加入事件，怎么办呢？</p>
<p>前面我们说到，<code>RunLoop</code>的作用相当于一个死循环，而且<code>RunLoop</code>还可以监听各种事件。</p>
<p>所以，实现这种需求，<code>RunLoop</code>最为合适。</p>
<p>其实每一条<strong>线程</strong>里都默认有一个<code>RunLoop</code>，只不过默认不开启。我们可以使用<code>[[NSRunLoop currentRunLoop] run];</code>语句对<code>RunLoop</code>进行开启。</p>
<p>开启之后，我们的控制台就会输出这样的信息：</p>
<p><img src="/img/控制台.png" alt="控制台信息"></p>
<p>我们可以发现，”线程执行”语句没有输出，也证明了<code>RunLoop</code>相当于是一个死循环</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>除了开启和运用RunLoop，我们还应该知道如何去关闭RunLoop</p>
<ul>
<li>用<code>[[NSRunLoop currentRunLoop] runUntilDate:]</code>方法，可以设定循环的时间</li>
<li>用<code>[NSThread exit]</code>关闭<code>NSThread</code>线程对象</li>
</ul>
<p>另外，其实主线程和子线程差别也没那么多（本质上应该是相同的）。</p>
<p>我们新建一个子线程后，当我们关闭主线程，子线程仍然能够独立运行，只是主线程的UI不再相应了。</p>
<p>前面提到的<code>在苹果漫长的开发中，苹果工程师将UI界面放在了主线程单线程执行</code>就是主线程与子线程的区别。</p>
<p>如果我们多线程操作UI，那么就会发生<strong>资源抢夺</strong>情况，如果要解决这种情况，就需要进行上锁操作。</p>
<p>苹果工程师们在<code>多线程上锁</code>和<code>主线程单线程执行</code>的选择中，选择了后者。</p>
<p>所以UIKit框架下的控件我们都使用<code>nonatomic</code>非原子属性修饰。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;RunLoop&quot;&gt;&lt;a href=&quot;#RunLoop&quot; class=&quot;headerlink&quot; title=&quot;RunLoop&quot;&gt;&lt;/a&gt;RunLoop&lt;/h2&gt;&lt;p&gt;​    RunLoop是每一个iOS程序员应该都听过的一个名字，翻译过来大概是叫运行循环，在iOS攻城狮们的开发初期，几乎见不到RunLoop的身影。&lt;/p&gt;
&lt;p&gt;​
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="RunLoop" scheme="http://yoursite.com/tags/RunLoop/"/>
    
  </entry>
  
  <entry>
    <title>iOS的本地推送</title>
    <link href="http://yoursite.com/2017/08/11/iOS%E7%9A%84%E6%9C%AC%E5%9C%B0%E6%8E%A8%E9%80%81/"/>
    <id>http://yoursite.com/2017/08/11/iOS的本地推送/</id>
    <published>2017-08-11T09:27:09.000Z</published>
    <updated>2019-11-10T07:00:43.253Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>iOS的推送有本地推送和远程推送两种，由于项目只需要个提示类型的，所以用本地推送就够了，所以在这里，介绍的都是iOS的本地推送。</p>
<p>​    <a id="more"></a></p>
<h2 id="推送准备"><a href="#推送准备" class="headerlink" title="推送准备"></a>推送准备</h2><p>要进行iOS推送之前，需要几个准备步骤，才能进行推送行为。</p>
<ul>
<li>首先，我们需要打开Push Notification开关</li>
</ul>
<p><img src="/img/Push notification.png" alt="Push Notification"></p>
<p>打开之后，系统会生成一个.entitlements文件</p>
<h3 id="注册通知"><a href="#注册通知" class="headerlink" title="注册通知"></a>注册通知</h3><p>因为没用第三方(穷)，于是选择使用了iOS自带的推送，如果用自带推送就需要以下几个步骤注册通知</p>
<ul>
<li><p>1、导入头文件<code>&lt;UserNotifications/UserNotifications.h&gt;</code>以及遵守<code>&lt;UNUserNotificationCenterDelegate&gt;</code>协议</p>
<p>因为兼容性的考虑，头文件最好写成这样</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#ifdef NSFoundationVersionNumber_iOS_9_x_Max</div><div class="line">#import &lt;UserNotifications/UserNotifications.h&gt;</div><div class="line">#endif</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>2、我们需要注册通知（需在<code>Appdelegate</code>中的<code>-(BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</code>注册）：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">if</span> ([[<span class="built_in">UIDevice</span> currentDevice].systemVersion floatValue] &gt;= <span class="number">10.0</span>) &#123;</div><div class="line">        <span class="comment">//iOS10特有</span></div><div class="line">        UNUserNotificationCenter *center = [UNUserNotificationCenter currentNotificationCenter];</div><div class="line"></div><div class="line">        center.delegate = <span class="keyword">self</span>;</div><div class="line">        [center requestAuthorizationWithOptions:(UNAuthorizationOptionAlert | UNAuthorizationOptionBadge | UNAuthorizationOptionSound) completionHandler:^(<span class="built_in">BOOL</span> granted, <span class="built_in">NSError</span> * _Nullable error) &#123;</div><div class="line">            <span class="keyword">if</span> (granted) &#123;</div><div class="line">                <span class="comment">// 点击允许</span></div><div class="line">                <span class="built_in">NSLog</span>(<span class="string">@"注册成功"</span>);</div><div class="line">                [center getNotificationSettingsWithCompletionHandler:^(UNNotificationSettings * _Nonnull settings) &#123;</div><div class="line">                    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, settings);</div><div class="line">                &#125;];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// 点击不允许</span></div><div class="line">                <span class="built_in">NSLog</span>(<span class="string">@"注册失败"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;];</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> ([[<span class="built_in">UIDevice</span> currentDevice].systemVersion floatValue] &gt;=<span class="number">8.0</span>)&#123;</div><div class="line">        <span class="comment">//iOS8 - iOS10</span></div><div class="line">        [application registerUserNotificationSettings:[<span class="built_in">UIUserNotificationSettings</span> settingsForTypes:<span class="built_in">UIUserNotificationTypeAlert</span> | <span class="built_in">UIUserNotificationTypeSound</span> | <span class="built_in">UIUserNotificationTypeBadge</span> categories:<span class="literal">nil</span>]];</div><div class="line">        </div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> ([[<span class="built_in">UIDevice</span> currentDevice].systemVersion floatValue] &lt; <span class="number">8.0</span>) &#123;</div><div class="line">        <span class="comment">//iOS8系统以下</span></div><div class="line">        [application registerForRemoteNotificationTypes:<span class="built_in">UIRemoteNotificationTypeBadge</span> | <span class="built_in">UIRemoteNotificationTypeAlert</span> | <span class="built_in">UIRemoteNotificationTypeSound</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 注册获得device Token</span></div><div class="line">    [[<span class="built_in">UIApplication</span> sharedApplication] registerForRemoteNotifications];</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>获取DeviceToken</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma  mark - 获取device Token</span></div><div class="line"><span class="comment">//获取DeviceToken成功</span></div><div class="line">- (<span class="keyword">void</span>)application:(<span class="built_in">UIApplication</span> *)application didRegisterForRemoteNotificationsWithDeviceToken:(<span class="built_in">NSData</span> *)deviceToken&#123;</div><div class="line"></div><div class="line">    <span class="comment">//正确写法</span></div><div class="line">    <span class="built_in">NSString</span> *deviceString = [[deviceToken description] stringByTrimmingCharactersInSet:[<span class="built_in">NSCharacterSet</span> characterSetWithCharactersInString:<span class="string">@"&lt;&gt;"</span>]];</div><div class="line">    deviceString = [deviceString stringByReplacingOccurrencesOfString:<span class="string">@" "</span> withString:<span class="string">@""</span>];</div><div class="line"></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"deviceToken===========%@"</span>,deviceString);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//获取DeviceToken失败</span></div><div class="line">- (<span class="keyword">void</span>)application:(<span class="built_in">UIApplication</span> *)application didFailToRegisterForRemoteNotificationsWithError:(<span class="built_in">NSError</span> *)error&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"[DeviceToken Error]:%@\n"</span>,error.description);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>值得一提的是iOS10更新后，在<code>&lt;UNUserNotificationCenterDelegate&gt;</code>中有两个处理通知接受和点击事件的方法</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">UNUserNotificationCenterDelegate</span> &lt;<span class="title">NSObject</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@optional</span></div><div class="line"></div><div class="line"><span class="comment">// The method will be called on the delegate only if the application is in the foreground. If the method is not implemented or the handler is not called in a timely manner then the notification will not be presented. The application can choose to have the notification presented as a sound, badge, alert and/or in the notification list. This decision should be based on whether the information in the notification is otherwise visible to the user.</span></div><div class="line">- (<span class="keyword">void</span>)userNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(<span class="keyword">void</span> (^)(UNNotificationPresentationOptions options))completionHandler __IOS_AVAILABLE(<span class="number">10.0</span>) __TVOS_AVAILABLE(<span class="number">10.0</span>) __WATCHOS_AVAILABLE(<span class="number">3.0</span>);</div><div class="line"></div><div class="line"><span class="comment">// The method will be called on the delegate when the user responded to the notification by opening the application, dismissing the notification or choosing a UNNotificationAction. The delegate must be set before the application returns from applicationDidFinishLaunching:.</span></div><div class="line">- (<span class="keyword">void</span>)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(<span class="keyword">void</span>(^)())completionHandler __IOS_AVAILABLE(<span class="number">10.0</span>) __WATCHOS_AVAILABLE(<span class="number">3.0</span>) __TVOS_PROHIBITED;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>在iOS10里面，本地通知与远程通知合二为一，在新的UNPushNotificationTrigger这个新类中，我们可以得到一些触发条件</p>
<ul>
<li>UNPushNotificationTrigger(远程通知) ：远程推送的通知类型</li>
<li>UNTimeIntervalNotificationTrigger(本地通知)：一定时间后，重复或不重复推送通知</li>
<li>UNCalendarNotificationTrigger(本地通知)：在一固定日期，重复或不重复推送</li>
<li>UNLocationNotificationTrigger(本地通知)：地理位置的一种通知，当用户进入或离开一个地理区域来通知。</li>
</ul>
<p>iOS10中接受通知回调是这样用的</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// iOS 10收到通知</span></div><div class="line">- (<span class="keyword">void</span>)userNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(<span class="keyword">void</span> (^)(UNNotificationPresentationOptions options))completionHandler&#123;</div><div class="line">    <span class="built_in">NSDictionary</span> * userInfo = notification.request.content.userInfo;</div><div class="line">    UNNotificationRequest *request = notification.request; <span class="comment">// 收到推送的请求</span></div><div class="line">    UNNotificationContent *content = request.content; <span class="comment">// 收到推送的消息内容</span></div><div class="line">    <span class="built_in">NSNumber</span> *badge = content.badge;  <span class="comment">// 推送消息的角标</span></div><div class="line">    <span class="built_in">NSString</span> *body = content.body;    <span class="comment">// 推送消息体</span></div><div class="line">    UNNotificationSound *sound = content.sound;  <span class="comment">// 推送消息的声音</span></div><div class="line">    <span class="built_in">NSString</span> *subtitle = content.subtitle;  <span class="comment">// 推送消息的副标题</span></div><div class="line">    <span class="built_in">NSString</span> *title = content.title;  <span class="comment">// 推送消息的标题</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span>([notification.request.trigger isKindOfClass:[UNPushNotificationTrigger <span class="keyword">class</span>]]) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"iOS10 前台收到远程通知:%@"</span>, [<span class="keyword">self</span> logDic:userInfo]);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 判断为本地通知</span></div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"iOS10 前台收到本地通知:&#123;\\\\nbody:%@，\\\\ntitle:%@,\\\\nsubtitle:%@,\\\\nbadge：%@，\\\\nsound：%@，\\\\nuserInfo：%@\\\\n&#125;"</span>,body,title,subtitle,badge,sound,userInfo);</div><div class="line">    &#125;</div><div class="line">    completionHandler(UNNotificationPresentationOptionBadge|UNNotificationPresentationOptionSound|UNNotificationPresentationOptionAlert); <span class="comment">// 需要执行这个方法，选择是否提醒用户，有Badge、Sound、Alert三种类型可以设置</span></div><div class="line">&#125;</div><div class="line">  <span class="comment">// 通知的点击事件</span></div><div class="line"></div><div class="line">(<span class="keyword">void</span>)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(<span class="keyword">void</span>(^)())completionHandler&#123;</div><div class="line"></div><div class="line"><span class="built_in">NSDictionary</span> * userInfo = response.notification.request.content.userInfo;</div><div class="line">UNNotificationRequest *request = response.notification.request; <span class="comment">// 收到推送的请求</span></div><div class="line">UNNotificationContent *content = request.content; <span class="comment">// 收到推送的消息内容</span></div><div class="line"><span class="built_in">NSNumber</span> *badge = content.badge;  <span class="comment">// 推送消息的角标</span></div><div class="line"><span class="built_in">NSString</span> *body = content.body;    <span class="comment">// 推送消息体</span></div><div class="line">UNNotificationSound *sound = content.sound;  <span class="comment">// 推送消息的声音</span></div><div class="line"><span class="built_in">NSString</span> *subtitle = content.subtitle;  <span class="comment">// 推送消息的副标题</span></div><div class="line"><span class="built_in">NSString</span> *title = content.title;  <span class="comment">// 推送消息的标题</span></div><div class="line"><span class="keyword">if</span>([response.notification.request.trigger isKindOfClass:[UNPushNotificationTrigger <span class="keyword">class</span>]]) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"iOS10 收到远程通知:%@"</span>, [<span class="keyword">self</span> logDic:userInfo]);</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// 判断为本地通知</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"iOS10 收到本地通知:&#123;\\nbody:%@，\\ntitle:%@,\\nsubtitle:%@,\\nbadge：%@，\\nsound：%@，\\nuserInfo：%@\\n&#125;"</span>,body,title,subtitle,badge,sound,userInfo);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Warning: UNUserNotificationCenter delegate received call to -userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler: but the completion handler was never called.</span></div><div class="line">completionHandler();  <span class="comment">// 系统要求执行这个方法</span></div><div class="line"></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">**这里需要提到的是，如果我们不写completionHandler（）这个方法，可能会报错误**</div><div class="line"></div><div class="line">* 在iOS10之前，本地通知创建是这样的：</div><div class="line"></div><div class="line">```objective-c</div><div class="line">- (<span class="keyword">void</span>)sendLocalNotifi &#123; </div><div class="line"><span class="comment">// 添加本地通知</span></div><div class="line">     <span class="built_in">UILocalNotification</span> *localNoti = [[<span class="built_in">UILocalNotification</span> alloc] init];</div><div class="line">     <span class="built_in">NSDate</span> *Date = [<span class="built_in">NSDate</span> date];</div><div class="line">     localNoti.fireDate = Date; <span class="comment">// 发送通知时间 这里没做具体处理，若是要推送时间无误差，时间要精确到秒。</span></div><div class="line">     localNoti.timeZone = [<span class="built_in">NSTimeZone</span> localTimeZone];     <span class="comment">// 设置时区 默认时区</span></div><div class="line">     localNoti.repeatInterval = <span class="built_in">NSCalendarUnitSecond</span>;     <span class="comment">// 发送通知的间隔</span></div><div class="line">     localNoti.alertTitle = <span class="string">@"iOS10之前的本地通知"</span>;                      <span class="comment">// 弹窗title</span></div><div class="line">     localNoti.alertBody = <span class="string">@"搞事了搞事了"</span>;               <span class="comment">// 弹窗body显示内容</span></div><div class="line"></div><div class="line">     localNoti.soundName = <span class="built_in">UILocalNotificationDefaultSoundName</span>;</div><div class="line">     localNoti.alertLaunchImage = <span class="string">@"1.jpg"</span>; <span class="comment">// 用于点击启动显示启动页，必须是 UILaunchImageFile</span></div><div class="line">     localNoti.userInfo = [<span class="built_in">NSDictionary</span> dictionaryWithObjectsAndKeys:<span class="string">@"value"</span>, <span class="string">@"key"</span>, <span class="literal">nil</span>];</div><div class="line">     <span class="comment">//    localNoti.soundName = @"1";                       // 响铃音乐文件名称， 放在main bundle 里边</span></div><div class="line">      localNoti.applicationIconBadgeNumber = <span class="number">2</span>;         <span class="comment">// app 的未读消息个数</span></div><div class="line"></div><div class="line"></div><div class="line">     [[<span class="built_in">UIApplication</span> sharedApplication] cancelAllLocalNotifications];</div><div class="line">     [[<span class="built_in">UIApplication</span> sharedApplication] scheduleLocalNotification:localNoti];    <span class="comment">// 按照指定时间发送通知</span></div><div class="line">     <span class="comment">// [[UIApplication sharedApplication] presentLocalNotificationNow:localNoti];  // 立即发送通知</span></div><div class="line"></div><div class="line"></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<ul>
<li>而在iOS10之后，通知创建变成了这样：</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">UNMutableNotificationContent *content = [[UNMutableNotificationContent alloc] init];</div><div class="line">    content.title = <span class="string">@"iOS10之后啦"</span>;</div><div class="line">    content.subtitle = <span class="string">@"搞事了"</span>;</div><div class="line">    content.body = <span class="string">@"123~"</span>;</div><div class="line">    content.badge = @<span class="number">0</span>;</div><div class="line">    <span class="built_in">NSString</span> *path = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"image1"</span> ofType:<span class="string">@"png"</span>];</div><div class="line">    <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</div><div class="line"><span class="comment">//将本地图片的路径形成一个图片附件，加入到content中</span></div><div class="line">    UNNotificationAttachment *img_attachment = [UNNotificationAttachment attachmentWithIdentifier:<span class="string">@"att1"</span> URL:[<span class="built_in">NSURL</span> fileURLWithPath:path] options:<span class="literal">nil</span> error:&amp;error];</div><div class="line">    <span class="keyword">if</span> (error) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, error);</div><div class="line">    &#125;</div><div class="line">    content.attachments = @[img_attachment];</div><div class="line">    <span class="comment">//设置为@""以后，进入app将没有启动页</span></div><div class="line">    content.launchImageName = <span class="string">@""</span>;</div><div class="line">    UNNotificationSound *sound = [UNNotificationSound defaultSound];</div><div class="line">    content.sound = sound;</div><div class="line">    <span class="comment">//设置时间间隔的触发器</span></div><div class="line">    UNTimeIntervalNotificationTrigger *time_trigger = [UNTimeIntervalNotificationTrigger triggerWithTimeInterval:<span class="number">10</span> repeats:<span class="literal">NO</span>];</div><div class="line">    <span class="built_in">NSString</span> *requestIdentifer = <span class="string">@"time interval request"</span>;</div><div class="line">    content.categoryIdentifier = <span class="string">@""</span>;</div><div class="line">    UNNotificationRequest *request = [UNNotificationRequest requestWithIdentifier:requestIdentifer content:content trigger:time_trigger];</div><div class="line">    [[UNUserNotificationCenter currentNotificationCenter] addNotificationRequest:request withCompletionHandler:^(<span class="built_in">NSError</span> * _Nullable error) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,error);</div><div class="line">    &#125;];</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>至此，本地通知创建就结束了，经过测试发现</p>
<ul>
<li>iOS10之前的推送，app在前台的时候，通知虽然会执行回调，但是并不会在主界面显示推送按钮</li>
<li>iOS10之前的推送，现在仍可以使用，感觉还挺方便的。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>Neo_joke的<a href="http://www.jianshu.com/p/9c9035212af0" target="_blank" rel="external">简书文章</a></p>
<p>徐不同的<a href="http://www.jianshu.com/p/f5337e8f336d" target="_blank" rel="external">简书文章</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;iOS的推送有本地推送和远程推送两种，由于项目只需要个提示类型的，所以用本地推送就够了，所以在这里，介绍的都是iOS的本地推送。&lt;/p&gt;
&lt;p&gt;​
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="推送" scheme="http://yoursite.com/tags/%E6%8E%A8%E9%80%81/"/>
    
  </entry>
  
  <entry>
    <title>关于 iBeacon</title>
    <link href="http://yoursite.com/2017/08/06/About%20iBeacon/"/>
    <id>http://yoursite.com/2017/08/06/About iBeacon/</id>
    <published>2017-08-06T10:54:02.000Z</published>
    <updated>2019-11-10T07:00:43.231Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>因为最近在做的项目是关于蓝牙连接的项目，前辈在做这个项目的时候，除了用 ReactiveCocoa 以外，还使用了 iBeacon 技术。</p>
<p>对于从未接触蓝牙这块的我，感觉打开了新世界大门。</p>
<p>​    <a id="more"></a></p>
<h2 id="iBeacon"><a href="#iBeacon" class="headerlink" title="iBeacon"></a>iBeacon</h2><p>iBeacon 是基于地理位置的微定位技术，使用的是 Apple 提供的 CoreLocation（BLE 使用的是 CoreBluetooth）。根据名字，应该很清楚，使用 iBeacon 是需要开启定位的，而使用 BLE 只需要开启蓝牙。  </p>
<h2 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h2><ul>
<li>UUID：UUID是 Universally UniqueIdentifier（通用唯一标识符）的缩写，实际上是一个随机字符串。在iBeacon 中，UUID 通常用于表示顶层标识，如果生成一个 UUID 给 iBeacon 设备，那么一个设备检测到你的 iBeacon 时，它就知道它是在和哪个 iBeacon 通信了。</li>
<li>major：用于将相关的 beacon 标识为一组。</li>
<li>minor：用于标识特定的 beacon 设备，每个设备都有唯一的 minor 编号。</li>
</ul>
<p>下面用一个商场的例子来解释这三个术语</p>
<p>你用有特定 UUID 的设备与商场里的 UUID 设备进行通信，一个商店中的所有设备都会被分配到相同的 major 编号，应用程序根据 major 编号，就可以知道你大概在哪个商店。而每个商店的每个 beacon 设备都有唯一的 minor 编号，那程序通过这个 minor 编号，就知道你位于商店的某一个位置</p>
<h2 id="iBeacon属性"><a href="#iBeacon属性" class="headerlink" title="iBeacon属性"></a>iBeacon属性</h2><p>iOS中的ibeacon通信数据有</p>
<ul>
<li>（NSUUID）ProximityUUID</li>
<li>（NSNumber）major</li>
<li>（NSNumber）minor</li>
<li>（CLProximity）proximity</li>
<li>（CLLocationAccuracy）accuracy</li>
<li>(NSInteger) rssi</li>
</ul>
<p>分别含义是：</p>
<ul>
<li>proximityUUID、major、minor 表示 ibeacon 的 uuid、major、minor</li>
<li>proximity 是 Apple 提供的几个表示距离的属性<ul>
<li>CLProximityUnknown-没有数据</li>
<li>CLProximityImmediate-十厘米以内</li>
<li>CLProximityNear-一米以内</li>
<li>CLProximityFar-一米以外</li>
</ul>
</li>
<li>accuracy 表示大约距离</li>
<li>RSSI 表示信号强度</li>
</ul>
<p>根据属性我们可以看到，Apple 的判断方式很有趣，它并不去仔细推断距离，而是使用贴近（Immediate）、一米以内（Near）、一米以外（Far）三种状态。距离在 1m 以内时，RSSI 值基本上成比例减少，而在1米以上时，由于各种因素，RSSI 是上下波动状态，所以无法推断距离，判定为 Far</p>
<h2 id="iBeacon方法"><a href="#iBeacon方法" class="headerlink" title="iBeacon方法"></a>iBeacon方法</h2><p>Apple在iOS4中增加了地理围栏API，可以用来在设备进出某个区域时获得通知，包括了：</p>
<ul>
<li>-startMonitoringForRegion:</li>
<li>-locationManager:didEnterRegion:</li>
<li>-locationManager:didExitRegion:</li>
</ul>
<p>这种检测 iBeacon 的方式叫做 <strong>monitoring</strong>。</p>
<p>用这几种方法可以使程序在后台运行时检测 iBeacon ，但是只能同时检测 20 个 Region，且不能推测设备与 Beacon 的距离。</p>
<p>除了使用地理围栏 API，Apple 还在 iOS7 中新增加了 iBeacon 的专用检测方式，也就是 <strong>ranging</strong></p>
<p>通过 <strong>CLLocationManager</strong> 的方法</p>
<ul>
<li><code>-startRangingBeaconsInRegion:</code> 检测特定 iBeacon。</li>
</ul>
<p>当检测到 beacon 的时候，<strong>CLLocationManager</strong> 的 delegate </p>
<ul>
<li><code>-locationManager：didRangeBeacons:inRegion:</code>会被调用，通知调用者被检测到的 beacons。这个方法会返回一个 <strong>CLbeacon</strong> 数组，根据里面的 <strong>proximity</strong> (上文所提到的属性)就可以判断设备与 beacon 之间的距离。</li>
</ul>
<h2 id="iBeacon行为"><a href="#iBeacon行为" class="headerlink" title="iBeacon行为"></a>iBeacon行为</h2><p>根据<a href="https://tech.meituan.com/" target="_blank" rel="external">美团点评技术团队</a>的文章，暂时有以下结论</p>
<ul>
<li>检测到 beacon 的时间跟设备进行蓝牙扫描的时间间隔有关，每当设备扫描时，就能发现 iBeacon region的变化。</li>
<li>在 rangging 打开的情况下，设备会每秒钟做一次扫描，也就是说状态更新最多延迟一秒。</li>
<li>程序在后台运行，并且 monitoring 打开的时候，设备可能每隔数分钟做一次扫描。iOS7 响应较慢， iOS7.1 后有较大改善。</li>
<li>如果存在设置<code>notifyEnterStateOnDisplay=yes</code>的 beacon ，iOS 会在屏幕从黑屏点亮的时候进行一次扫描。</li>
<li>设备重启并不影响 iBeacon 后台检测的执行</li>
<li>iOS7 中，在多任务界面中杀掉程序会终止 iBeacon 检测的执行，iOS7.1 改变了这一行为，被杀掉的 app 还可以继续进行 iBeacon 的检测。</li>
</ul>
<p>在才接触这个项目的初期，好奇于项目与我事先准备的 BLE 协议实现有些区别，后来了解到用到了 iBeacon 技术，起初好奇为什么锁屏点亮和锁屏黑屏有什么区别，以为只是因为亮屏可能会激活后台。后来在了解了iBeacon 之后，才知道，还有这种操作。所以啊，我们永远都不能放弃学习~。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>美团点评技术团队：<a href="https://tech.meituan.com/iBeacaon-first-glance.html" target="_blank" rel="external">iBeacon初探</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为最近在做的项目是关于蓝牙连接的项目，前辈在做这个项目的时候，除了用 ReactiveCocoa 以外，还使用了 iBeacon 技术。&lt;/p&gt;
&lt;p&gt;对于从未接触蓝牙这块的我，感觉打开了新世界大门。&lt;/p&gt;
&lt;p&gt;​
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="iBeacon" scheme="http://yoursite.com/tags/iBeacon/"/>
    
  </entry>
  
  <entry>
    <title>项目里的ReactiveCocoa</title>
    <link href="http://yoursite.com/2017/07/28/%E9%A1%B9%E7%9B%AE%E9%87%8C%E7%9A%84ReactiveCocoa/"/>
    <id>http://yoursite.com/2017/07/28/项目里的ReactiveCocoa/</id>
    <published>2017-07-28T10:59:44.000Z</published>
    <updated>2019-11-10T07:00:43.262Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>　　最近做了一个蓝牙相关的项目，项目的前辈当时是用的ReactiveCocoa（RAC）做的，才开始接手的时候，看的一头雾水。经过一段时间自学，现在对RAC略知一二。</p>
<p>​    <a id="more"></a></p>
<h2 id="FunctionalReactiveProgramming"><a href="#FunctionalReactiveProgramming" class="headerlink" title="FunctionalReactiveProgramming"></a>FunctionalReactiveProgramming</h2><p>FRP是一种响应变化的编程范式。<img src="/img/FRP.png" alt="FRP"></p>
<p>就像上面的登录界面，在用户输入用户名和密码之前，登陆按钮是处于无法点击状态的，只有当用户名和密码都被填入一定值的时候，才可以点击登陆按钮。这种一个按钮会由于另外几个控件的改变而改变的联动就是FRP。</p>
<h2 id="ReactiveCocoa"><a href="#ReactiveCocoa" class="headerlink" title="ReactiveCocoa"></a>ReactiveCocoa</h2><p>RAC是github上的一个开源项目，可以说是将响应式编程做到了极致。RAC中，通过<strong>RACsignal</strong>来发送信号以执行各种操作</p>
<p>在这里，<a href="limboy.me">limboy(李忠)</a> 的文章里写的很好</p>
<p>他把信号比作水龙头，但是水龙头里装的是直径与水龙头内径一样的玻璃球(Value)，这样，玻璃球就是依次出来的（没有并发）。水龙头是关着的，需要有接收方（Subscriber）打开，这样只要有玻璃球(Value)出现，就会自动给接收方(subscriber)。还可以在水龙头上加一个滤嘴(Filter)，不符合的东西也不让过。还可以加一个改动装置，把球改成符合自己的需求（map）。也可以合并多个水龙头(combineLastest:reduce:)，这样只有有一个水龙头出玻璃球，这个新水龙头的接收方就会得到这个球。</p>
<p>比如</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//filter某个属性满足一定条件才执行。  </span></div><div class="line"></div><div class="line">  [[RACObserve(<span class="keyword">self</span>, count) filter:^<span class="built_in">BOOL</span>(<span class="keyword">id</span> count) &#123;</div><div class="line">  <span class="keyword">if</span> ([count integerValue] == <span class="number">5</span>) &#123;            </div><div class="line">		<span class="keyword">return</span> <span class="literal">YES</span>;        &#125;</div><div class="line">	<span class="keyword">else</span>&#123;           </div><div class="line">	 	<span class="keyword">return</span> <span class="literal">NO</span>;        </div><div class="line">	&#125;   </div><div class="line"> &#125;]subscribeNext:^(<span class="keyword">id</span> count) &#123;<span class="comment">//上面return YES 才执行   </span></div><div class="line"></div><div class="line"> <span class="built_in">NSLog</span>(<span class="string">@"数量为===%@"</span>,count);    &#125;];</div></pre></td></tr></table></figure>
<p>RAC还在<strong>UIButton、UITextFiled</strong>等的Category中添加了很多方法，可以直接设置事件。</p>
<h2 id="统一了KVO-Event-Notification等的处理"><a href="#统一了KVO-Event-Notification等的处理" class="headerlink" title="统一了KVO Event Notification等的处理"></a>统一了KVO Event Notification等的处理</h2><blockquote>
<p>KVO</p>
</blockquote>
<p>RAC中监听属性改变不再像KVO中用<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">而是使用block</div><div class="line"></div><div class="line">```objc</div><div class="line">// 只有当名字以&apos;j&apos;开头，才会被记录</div><div class="line">[[RACAble(self.username) filter:^(NSString *newName) &#123;</div><div class="line">       return [newName hasPrefix:@&quot;j&quot;];</div><div class="line">   &#125;]</div><div class="line">   subscribeNext:^(NSString *newName) &#123;</div><div class="line">       NSLog(@&quot;%@&quot;, newName);</div><div class="line">   &#125;];</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Notification</p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[[<span class="built_in">NSNotificationCenter</span> defaultCenter]rac_addObserverForName:<span class="string">@"ReceiveData"</span> object:<span class="literal">nil</span>] subscribeNext:^(<span class="built_in">NSNotification</span> * _Nullable x) &#123;</div><div class="line">                <span class="built_in">NSlog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h2 id="冷热信号"><a href="#冷热信号" class="headerlink" title="冷热信号"></a>冷热信号</h2><p>上面提到的只有subscriber订阅时才生效的信号叫做<strong>冷信号</strong></p>
<p>有冷信号，自然就有<strong>热信号</strong></p>
<ul>
<li>热信号是主动的，不管你有没有订阅事件，它会时刻推送。</li>
<li>热信号可以有多个订阅者，信号和订阅者可以共享信息，多个订阅者可以在订阅开始时同时接收到这个时间及以后的信号（热信号创建时若没有订阅者，它仍然会进行信号发送），而冷信号多个订阅者订阅时，是将信号完整的分别发送给订阅者。</li>
</ul>
<p>冷热信号的区分，美团点评技术团队的<a href="https://tech.meituan.com/talk-about-reactivecocoas-cold-signal-and-hot-signal-part-1.html" target="_blank" rel="external">细说ReactiveCocoa的冷热信号</a>文章写的非常的好。</p>
<p>因为项目的需要，本人还在不断学习，归纳的东西还不够成熟，希望自己能加油吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　最近做了一个蓝牙相关的项目，项目的前辈当时是用的ReactiveCocoa（RAC）做的，才开始接手的时候，看的一头雾水。经过一段时间自学，现在对RAC略知一二。&lt;/p&gt;
&lt;p&gt;​
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="RAC" scheme="http://yoursite.com/tags/RAC/"/>
    
  </entry>
  
</feed>
